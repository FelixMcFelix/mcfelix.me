/**
 * @namespace Sketch
 */
var Sketch = Sketch || {};

/**
 * Creates an instance of the Sketch module with standard configuration.
 * @method Sketch.createSketch
 * @param {HTMLCanvasElement} inCanvas
 * @returns {Sketch.Driver}
 * @public
 * @author FelixMcFelix (Kyle S.)
 */
Sketch.createSketch = function(inCanvas){
	var out = new Sketch.Driver(inCanvas);
	out.addShaderURL("shaders/sketch-default.json");
	return out;
};
/* global Sketch */
/**
 * @classdesc The driver class for the sketch module. Initialise via Sketch.createSketch(...) for default configs.
 * @class Sketch.Driver
 * @param {HTMLCanvasElement} canvas - The canvas element that sketch will be targeting.
 * @author FelixMcFelix (Kyle S.)
 */
Sketch.Driver = function(canvas){
	/**
	 * Internal counter used to block execution calls while shaders are still being added.
	 * @name Sketch.Driver#readyLock
	 * @type int
	 * @private
	 */
	this.readyLock = 0;

	//Canvas-y stuff;
	/**
	 * The module's attached canvas.
	 * @name Sketch.Driver#canvas
	 * @type HTMLCanvasElement
	 * @protected
	 * @readonly
	 */
	this.canvas = canvas;
	/**
	 * The module's attached context.
	 * @name Sketch.Driver#context
	 * @type WebGLRenderingContext
	 * @protected
	 * @readonly
	 */
	this.context = canvas.getContext("webgl", {preserveDrawingBuffer: true});

	//Modules.
	/**
	 * A reference to the parser.
	 * @name Sketch.Driver#parser
	 * @type Parser
	 * @protected
	 * @readonly
	 */
	this.parser = sketchParse;
	/**
	 * The module's reference to the code generator.
	 * @name Sketch.Driver#codeGen
	 * @type Object
	 * @protected
	 * @readonly
	 */
	this.codeGen = null;
	/**
	 * The module's reference to the shader manager.
	 * @name Sketch.Driver#shaderManager
	 * @type Palette.Manager
	 * @protected
	 * @readonly
	 */
	this.shaderManager = new Palette.Manager(this.context);
	/**
	 * The module's reference to the VM.
	 * @name Sketch.Driver#vm
	 * @type MVM
	 * @protected
	 * @readonly
	 */
	this.vm = null;
};

Sketch.Driver.prototype = {
	/**
	 * Add a shader from an already-resolved JSON String.
	 * @method Sketch.Driver#addShader
	 * @param {String} text - the JSON string for a shader object.
	 * @public
	 */
	addShader: function(text){
		this.readyLock++;
		this.addShaderInternal(text);
	},

	/**
	 * Add a shader from a URL.
	 * @method Sketch.Driver#addShaderURL
	 * @param {String} url - the URL string leading to a shader object.
	 * @async
	 * @public
	 */
	addShaderURL: function(url){
		this.readyLock++;
		var that = this;
		var x = new XMLHttpRequest();
		x.open("GET", url, true);
		x.onload = function(){
			that.addShaderInternal(x.responseText);
		};
		x.send();
	},

	/**
	 * Final phase of shader addition. Frees up the lock to allow execution.
	 * @method Sketch.Driver#addShaderInternal
	 * @param {String} text - the JSON string for a shader object.
	 * @private
	 */
	addShaderInternal: function(text){
		this.shaderManager.addShader(text);
		this.readyLock--;
	},

	/**
	 * Compile and execute a Sketch program.
	 * @method Sketch.Driver#compile
	 * @param {String} text - the source code for a Sketch program.
	 * @returns boolean - will fail either on error, or if shaders are still being added.
	 * @public
	 */
	compile: function(text){
		if(this.readyLock>0){
			alert("Sketch driver is still loading shaders - be patient!" +
			" If it's been excessively long then you may have tried to add a malformed shader.");
			return false;
		}
		if(this.vm){
			this.vm.kill();
		}
		this.vm = null;
		this.codeGen = null;
		try{
			this.codeGen = new Sketch.SketchGen();
			var ast = this.parser.parse(text);

			var prog = this.codeGen.interpret(ast);

			var vm = new MVM.VM(this.context, this.shaderManager, prog.code, false);

			this.vm = vm;
			var d = this.vm.interpret();

			if(prog.initAddr !== null){
				this.vm.call(prog.initAddr, []);
			}

			var initTime = Date.now();
			if(prog.renderAddr !== null){
				var t = this;

				var fn = function(){
					if(!vm.dead){
						vm.call(prog.renderAddr, [Date.now()-initTime]);
						var k = window.requestAnimationFrame(fn, t.canvas);
					}
				}

				window.requestAnimationFrame(fn, this.canvas);
				
			}
			// alert("The final values of global scope variables are (in order of definition):\n"+d.variables);
			//Since the code generator is not capable of outputting graphical operations
			//we shall simply print the stack's top value to demonstrate our wonderful
			//calculator.
			// alert("The Virtual Machine's final state is in the console.");
			console.log(d);
		} catch (e){
			alert("Error detected while rendering! See console for stack trace.");
			console.log(e);
			return false;
		}
		return true;
	}
};
;
// end

/* parser generated by jison 0.4.15 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var sketchParse = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,8],$V1=[1,41],$V2=[1,20],$V3=[1,12],$V4=[1,28],$V5=[1,29],$V6=[1,21],$V7=[1,22],$V8=[1,23],$V9=[1,24],$Va=[1,25],$Vb=[1,26],$Vc=[1,27],$Vd=[1,19],$Ve=[1,36],$Vf=[1,37],$Vg=[1,38],$Vh=[1,39],$Vi=[1,40],$Vj=[1,42],$Vk=[1,43],$Vl=[1,30],$Vm=[1,31],$Vn=[1,32],$Vo=[1,33],$Vp=[1,34],$Vq=[1,35],$Vr=[5,10,21,25,29,34,35,36,39,40,41,42,43,44,47,67,68,69,70,71,73,74,77,78,79,80,81,82],$Vs=[1,47],$Vt=[5,10,21,25,26,29,34,35,36,39,40,41,42,43,44,47,67,68,69,70,71,73,74,77,78,79,80,81,82],$Vu=[2,87],$Vv=[1,50],$Vw=[5,10,21,25,26,29,34,35,36,39,40,41,42,43,44,67,68,69,70,71,73,74,77,78,79,80,81,82],$Vx=[1,58],$Vy=[1,52],$Vz=[1,53],$VA=[1,54],$VB=[1,55],$VC=[1,56],$VD=[1,57],$VE=[5,10,19,21,22,24,25,26,29,34,35,36,39,40,41,42,43,44,46,47,48,49,50,66,67,68,69,70,71,73,74,75,77,78,79,80,81,82],$VF=[1,77],$VG=[2,93],$VH=[1,78],$VI=[5,10,26,29,34,35,36,39,40,41,42,43,44,77,78,79,80,81,82],$VJ=[25,67],$VK=[5,10,16,19,21,22,24,25,26,29,34,35,36,39,40,41,42,43,44,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,73,74,75,77,78,79,80,81,82],$VL=[22,24],$VM=[5,10,16,21,22,24,25,26,29,34,35,36,39,40,41,42,43,44,47,67,68,69,70,71,73,74,75,77,78,79,80,81,82],$VN=[5,10,21,25,26,29,34,35,36,39,40,41,42,43,44,47,67,68,69,70,71,73,74,75,77,78,79,80,81,82],$VO=[5,10,21,22,24,25,26,29,34,35,36,39,40,41,42,43,44,46,47,48,49,66,67,68,69,70,71,73,74,75,77,78,79,80,81,82],$VP=[5,10,21,25,26,29,34,35,36,38,39,40,41,42,43,44,47,67,68,69,70,71,73,74,77,78,79,80,81,82],$VQ=[1,134],$VR=[10,21,25,26,29,34,35,36,39,40,41,42,43,44,47,67,68,69,70,71,73,74,77,78,79,80,81,82],$VS=[2,91],$VT=[5,10,21,22,24,25,26,29,34,35,36,39,40,41,42,43,44,46,47,66,67,68,69,70,71,73,74,75,77,78,79,80,81,82],$VU=[5,10,21,22,24,25,26,29,34,35,36,39,40,41,42,43,44,67,68,69,70,71,73,74,75,77,78,79,80,81,82],$VV=[22,24,26],$VW=[1,159],$VX=[19,25],$VY=[2,35],$VZ=[1,169];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"start":3,"program":4,"EOF":5,"declarations":6,"out-decl":7,"in-decl":8,"statement":9,"FUNCTION":10,"declarator":11,"declaration_list":12,"func_return":13,"body":14,"param":15,"ASSIGN":16,"exp":17,"semi":18,"ARROW":19,"type":20,"OPEN_PARENS":21,"CLOSE_PARENS":22,"param_list":23,"COMMA":24,"OPEN_BRACE":25,"CLOSE_BRACE":26,"statement_list":27,"decl_list":28,"function":29,"condition_statements":30,"iteration_statements":31,"jump_statements":32,"render_statements":33,"CLEAR":34,"DRAW":35,"IF":36,"else_ifs":37,"ELSE":38,"WHILE":39,"DO":40,"FOR":41,"CONTINUE":42,"BREAK":43,"RETURN":44,"prim_expr":45,"PLUS":46,"MINUS":47,"MULT":48,"DIV":49,"MODULO":50,"OP_ADD_ASSIGNMENT":51,"OP_SUB_ASSIGNMENT":52,"OP_MULT_ASSIGNMENT":53,"OP_DIV_ASSIGNMENT":54,"OP_MOD_ASSIGNMENT":55,"OP_INC":56,"OP_DEC":57,"OP_AND":58,"OP_OR":59,"OP_EQ":60,"LT":61,"GT":62,"OP_NE":63,"OP_LE":64,"OP_GE":65,"TILDE":66,"IDENTIFIER":67,"NUMBER":68,"TRUE":69,"FALSE":70,"EXCL":71,"init_list":72,"WIDTH":73,"HEIGHT":74,"SEMICOLON":75,"declaration":76,"VOID":77,"NUM":78,"BOOL":79,"POINT":80,"LINE":81,"POLYGON":82,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",10:"FUNCTION",16:"ASSIGN",19:"ARROW",21:"OPEN_PARENS",22:"CLOSE_PARENS",24:"COMMA",25:"OPEN_BRACE",26:"CLOSE_BRACE",29:"function",34:"CLEAR",35:"DRAW",36:"IF",38:"ELSE",39:"WHILE",40:"DO",41:"FOR",42:"CONTINUE",43:"BREAK",44:"RETURN",46:"PLUS",47:"MINUS",48:"MULT",49:"DIV",50:"MODULO",51:"OP_ADD_ASSIGNMENT",52:"OP_SUB_ASSIGNMENT",53:"OP_MULT_ASSIGNMENT",54:"OP_DIV_ASSIGNMENT",55:"OP_MOD_ASSIGNMENT",56:"OP_INC",57:"OP_DEC",58:"OP_AND",59:"OP_OR",60:"OP_EQ",61:"LT",62:"GT",63:"OP_NE",64:"OP_LE",65:"OP_GE",66:"TILDE",67:"IDENTIFIER",68:"NUMBER",69:"TRUE",70:"FALSE",71:"EXCL",73:"WIDTH",74:"HEIGHT",75:"SEMICOLON",77:"VOID",78:"NUM",79:"BOOL",80:"POINT",81:"LINE",82:"POLYGON"},
productions_: [0,[3,2],[3,1],[4,1],[4,2],[6,1],[6,1],[6,1],[7,5],[8,4],[8,2],[13,2],[13,0],[12,2],[12,3],[23,1],[23,3],[15,2],[14,2],[14,3],[14,3],[14,4],[9,2],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[33,2],[33,3],[33,3],[30,6],[37,7],[37,2],[37,0],[31,5],[31,7],[31,9],[32,2],[32,2],[32,3],[32,2],[28,1],[28,1],[28,2],[28,2],[27,1],[27,2],[27,2],[17,1],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,2],[17,2],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,2],[45,1],[45,1],[45,1],[45,1],[45,2],[45,3],[45,4],[45,3],[45,3],[45,1],[45,1],[18,1],[18,0],[11,1],[76,1],[76,4],[72,1],[72,3],[72,0],[20,1],[20,1],[20,1],[20,1],[20,1],[20,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

           {typeof console !== 'undefined' ? console.log("%j",$$[$0-1]) : print($$[$0-1]);
          return $$[$0-1];
           }
        
break;
case 2:
return [];
break;
case 4:
this.$ = [$$[$0-1],$$[$0]];
break;
case 8:
this.$ = {type: Sketch.SketchGenNodes["function"],
          arguments: [$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]]};
break;
case 9:
 this.$ = { type: Sketch.SketchGenNodes["variable_decl_assign"],
           arguments: [ $$[$0-3],$$[$0-1]]};
break;
case 10:
this.$ = {
          type: Sketch.SketchGenNodes["variable_decl"],
          arguments: $$[$0-1]};
    
break;
case 11:
this.$ = $$[$0];
break;
case 12:
this.$ = "void";
break;
case 13:
this.$ = [];
break;
case 14:
this.$ = $$[$0-1];
break;
case 15:
this.$ = [$$[$0]];
break;
case 16:
this.$= $$[$0-2]; this.$.push($$[$0]);
break;
case 17:
this.$ = {type: Sketch.SketchGenNodes["decl"], arguments: [$$[$0-1], $$[$0]]};
break;
case 18:
 this.$ = {type: Sketch.SketchGenNodes["block"], arguments: []}; 
break;
case 19: case 20:
 this.$ = {type: Sketch.SketchGenNodes["block"], arguments: $$[$0-1]}; 
break;
case 21:
 this.$ = {type: Sketch.SketchGenNodes["block"], arguments: [$$[$0-2],$$[$0-1]]}; 
break;
case 29:
 this.$ = {type: Sketch.SketchGenNodes["clear"], arguments: null}; 
break;
case 30:
 this.$ = {type: Sketch.SketchGenNodes["clear_colour"], arguments: $$[$0-1]}; 
break;
case 31:
 this.$ = {type: Sketch.SketchGenNodes["draw"], arguments: $$[$0-1]}; 
break;
case 32:
 this.$ = {type: Sketch.SketchGenNodes["if"], arguments: [{type: Sketch.SketchGenNodes["else_if"], arguments:[$$[$0-3], $$[$0-1]]}].concat($$[$0])}; 
break;
case 33:

      this.$ = $$[$0]; 
      this.$.unshift({
        type: Sketch.SketchGenNodes["else_if"],
        arguments: [$$[$0-3], $$[$0-1]]
      }); 
    
break;
case 34:
 this.$ = [{type: Sketch.SketchGenNodes["else"], arguments: $$[$0]}]; 
break;
case 35: case 93:
 this.$ = []; 
break;
case 36:
this.$ = {type : "while", 
              arguments: [ $$[$0-2],
                           $$[$0-1]
                         ]
            }; 
     
break;
case 37:
this.$ = {type : "do_while", 
              arguments: [ $$[$0-5],
                           $$[$0-2]
                         ]
            }; 
     
break;
case 38:
this.$ = {type : "for", 
              arguments: [ $$[$0-6],
                           $$[$0-4],
                           $$[$0-2],
                           $$[$0]
                         ]
            }; 
     
break;
case 41:
 this.$ = {type: Sketch.SketchGenNodes["return"], arguments: $$[$0-1]}; 
break;
case 42:
 this.$ = {type: Sketch.SketchGenNodes["return"], arguments: null}; 
break;
case 45: case 46:
this.$= [$$[$0-1],$$[$0]];
break;
case 47:
this.$= [$$[$0]]
break;
case 48: case 49:
this.$ = $$[$0-1]; this.$.push($$[$0]);
break;
case 51:
this.$ = {
                        type: Sketch.SketchGenNodes["addition"],
                        arguments: [ 
                            $$[$0-2],
                            $$[$0]]
                        }; 
                
break;
case 52:
this.$ = { 
                        type: Sketch.SketchGenNodes["subtraction"],
                        arguments:[
                            $$[$0-2], 
                            $$[$0]]
                       };
                
break;
case 53:
this.$ = { 
                        type: Sketch.SketchGenNodes["multiplication"],
                        arguments:[
                            $$[$0-2], 
                            $$[$0]]
                       };
                
break;
case 54:
this.$ = { 
                        type: Sketch.SketchGenNodes["division"],
                        arguments:[
                            $$[$0-2], 
                            $$[$0]]
                       };
                
break;
case 55:
this.$ = { 
                        type: Sketch.SketchGenNodes["modulo"],
                        arguments:[
                            $$[$0-2], 
                            $$[$0]]
                       };
                
break;
case 56:
this.$ = { 
                        type: Sketch.SketchGenNodes["add_assign"],
                        arguments:[
                            $$[$0-2], 
                            $$[$0]]
                       };
                
break;
case 57:
this.$ = { 
                        type: Sketch.SketchGenNodes["sub_assign"],
                        arguments:[
                            $$[$0-2], 
                            $$[$0]]
                       };
                
break;
case 58:
this.$ = { 
                        type: Sketch.SketchGenNodes["mul_assign"],
                        arguments:[
                            $$[$0-2], 
                            $$[$0]]
                       };
                
break;
case 59:
this.$ = { 
                        type: Sketch.SketchGenNodes["div_assign"],
                        arguments:[
                            $$[$0-2], 
                            $$[$0]]
                       };
                
break;
case 60:
this.$ = { 
                        type: Sketch.SketchGenNodes["mod_assign"],
                        arguments:[
                            $$[$0-2], 
                            $$[$0]]
                       };
                
break;
case 61:
this.$ = { 
                        type: Sketch.SketchGenNodes["increment"],
                        arguments:[
                            $$[$0-1]]
                       };
                
break;
case 62:
this.$ = { 
                        type: Sketch.SketchGenNodes["decrement"],
                        arguments:[
                            $$[$0-1]]
                       };
                
break;
case 63:
this.$ = { 
                        type: Sketch.SketchGenNodes["and"],
                        arguments:[
                            $$[$0-2], 
                            $$[$0]]
                       };
                
break;
case 64:
this.$ = { 
                        type: Sketch.SketchGenNodes["or"],
                        arguments:[
                            $$[$0-2], 
                            $$[$0]]
                       };
                
break;
case 65:
this.$ = { 
                        type: Sketch.SketchGenNodes["equal"],
                        arguments:[
                            $$[$0-2], 
                            $$[$0]]
                       };
                
break;
case 66:
this.$ = { 
                        type: Sketch.SketchGenNodes["less_than"],
                        arguments:[
                            $$[$0-2], 
                            $$[$0]]
                       };
                
break;
case 67:
this.$ = { 
                        type: Sketch.SketchGenNodes["greater_than"],
                        arguments:[
                            $$[$0-2], 
                            $$[$0]]
                       };
                
break;
case 68:
this.$ = { 
                        type: Sketch.SketchGenNodes["not_equal"],
                        arguments:[
                            $$[$0-2], 
                            $$[$0]]
                       };
                
break;
case 69:
this.$ = { 
                        type: Sketch.SketchGenNodes["less_than_or_equal"],
                        arguments:[
                            $$[$0-2], 
                            $$[$0]]
                       };
                
break;
case 70:
this.$ = { 
                        type: Sketch.SketchGenNodes["greater_than_or_equal"],
                        arguments:[
                            $$[$0-2], 
                            $$[$0]]
                       };
                
break;
case 71:
this.$ = { 
                        type: Sketch.SketchGenNodes["assign"],
                        arguments:[
                            $$[$0-2], 
                            $$[$0]]
                       };
                
break;
case 72:
 this.$ = {
                    type: Sketch.SketchGenNodes["colour"],
                    arguments: [$$[$0-2], $$[$0]]
                  };
                
break;
case 73:
 this.$ = {
                    type: Sketch.SketchGenNodes["translate"],
                    arguments: [$$[$0-2], $$[$0]]
                  };
                
break;
case 74:
 this.$ = {type: Sketch.SketchGenNodes["unary_minus"], arguments: $$[$0]};
      
break;
case 75:
 this.$ = {type: Sketch.SketchGenNodes["ident"], arguments: yytext}; 
break;
case 76:
 this.$ = {type: Sketch.SketchGenNodes["num"], arguments: Number(yytext)}; 
break;
case 77:
 this.$ = {type: Sketch.SketchGenNodes["bool"], arguments: true}; 
break;
case 78:
 this.$ = {type: Sketch.SketchGenNodes["bool"], arguments: false}; 
break;
case 79:
 this.$ = {type: Sketch.SketchGenNodes["negate"], arguments: $$[$0]};
break;
case 80: case 83:
 this.$ = $$[$0-1];
break;
case 81:
 this.$ = { type: Sketch.SketchGenNodes["func_call"], arguments: [$$[$0-3],$$[$0-1]]}; 
break;
case 82:
 this.$ = { type: Sketch.SketchGenNodes["point"], arguments: $$[$0-1]};
break;
case 84:
 this.$ = { type: Sketch.SketchGenNodes["width"], arguments: null};
break;
case 85:
 this.$ = { type: Sketch.SketchGenNodes["height"], arguments: null};
break;
case 90:
this.$ = [$$[$0-3],$$[$0-1]];
break;
case 91:
 this.$ = [$$[$0]]; 
break;
case 92:
 this.$ = $$[$0-2]; this.$.push($$[$0]); 
break;
}
},
table: [{3:1,4:2,5:[1,3],6:4,7:5,8:6,9:7,10:$V0,14:11,15:9,17:10,20:17,21:$V1,25:$V2,29:$V3,30:13,31:14,32:15,33:16,34:$V4,35:$V5,36:$V6,39:$V7,40:$V8,41:$V9,42:$Va,43:$Vb,44:$Vc,45:18,47:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,73:$Vj,74:$Vk,77:$Vl,78:$Vm,79:$Vn,80:$Vo,81:$Vp,82:$Vq},{1:[3]},{5:[1,44],6:45,7:5,8:6,9:7,10:$V0,14:11,15:9,17:10,20:17,21:$V1,25:$V2,29:$V3,30:13,31:14,32:15,33:16,34:$V4,35:$V5,36:$V6,39:$V7,40:$V8,41:$V9,42:$Va,43:$Vb,44:$Vc,45:18,47:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,73:$Vj,74:$Vk,77:$Vl,78:$Vm,79:$Vn,80:$Vo,81:$Vp,82:$Vq},{1:[2,2]},o($Vr,[2,3]),o($Vr,[2,5]),o($Vr,[2,6]),o($Vr,[2,7]),{11:46,67:$Vs},o($Vt,$Vu,{18:49,16:[1,48],75:$Vv}),o($Vw,$Vu,{18:51,19:$Vx,46:$Vy,47:$Vz,48:$VA,49:$VB,50:$VC,66:$VD,75:$Vv}),o($Vt,[2,23]),o($Vt,[2,24]),o($Vt,[2,25]),o($Vt,[2,26]),o($Vt,[2,27]),o($Vt,[2,28]),{11:59,67:$Vs},o($VE,[2,50],{16:[1,75],51:[1,60],52:[1,61],53:[1,62],54:[1,63],55:[1,64],56:[1,65],57:[1,66],58:[1,67],59:[1,68],60:[1,69],61:[1,70],62:[1,71],63:[1,72],64:[1,73],65:[1,74]}),{17:76,21:$V1,25:$VF,45:18,47:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,73:$Vj,74:$Vk},{7:84,8:83,9:82,10:$V0,14:11,15:9,17:85,20:17,21:$V1,24:$VG,25:$V2,26:$VH,27:79,28:80,29:$V3,30:13,31:14,32:15,33:16,34:$V4,35:$V5,36:$V6,39:$V7,40:$V8,41:$V9,42:$Va,43:$Vb,44:$Vc,45:18,47:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:81,73:$Vj,74:$Vk,77:$Vl,78:$Vm,79:$Vn,80:$Vo,81:$Vp,82:$Vq},{21:[1,86]},{21:[1,87]},{9:88,14:11,17:10,21:$V1,25:$V2,29:$V3,30:13,31:14,32:15,33:16,34:$V4,35:$V5,36:$V6,39:$V7,40:$V8,41:$V9,42:$Va,43:$Vb,44:$Vc,45:18,47:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,73:$Vj,74:$Vk},{21:[1,89]},o($Vt,$Vu,{18:90,75:$Vv}),o($Vt,$Vu,{18:91,75:$Vv}),o($VI,$Vu,{45:18,17:92,18:93,21:$V1,25:$VF,47:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,73:$Vj,74:$Vk,75:$Vv}),o($VI,$Vu,{45:18,18:94,17:95,21:$V1,25:$VF,47:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,73:$Vj,74:$Vk,75:$Vv}),{17:96,21:$V1,25:$VF,45:18,47:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,73:$Vj,74:$Vk},o($VJ,[2,94]),o($VJ,[2,95]),o($VJ,[2,96]),o($VJ,[2,97]),o($VJ,[2,98]),o($VJ,[2,99]),o([5,10,16,19,22,24,25,26,29,34,35,36,39,40,41,42,43,44,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,73,74,75,77,78,79,80,81,82],[2,75],{21:[1,97]}),o($VK,[2,76]),o($VK,[2,77]),o($VK,[2,78]),{21:$V1,25:$VF,45:98,67:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,73:$Vj,74:$Vk},o($VL,$VG,{45:18,17:99,72:100,21:$V1,25:$VF,47:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,73:$Vj,74:$Vk}),o($VK,[2,84]),o($VK,[2,85]),{1:[2,1]},o($Vr,[2,4]),{12:101,21:[1,102]},o($VM,[2,88]),{17:103,21:$V1,25:$VF,45:18,47:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,73:$Vj,74:$Vk},o($VN,[2,10]),o($VN,[2,86]),o($Vt,[2,22]),{17:104,21:$V1,25:$VF,45:18,47:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,73:$Vj,74:$Vk},{17:105,21:$V1,25:$VF,45:18,47:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,73:$Vj,74:$Vk},{17:106,21:$V1,25:$VF,45:18,47:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,73:$Vj,74:$Vk},{17:107,21:$V1,25:$VF,45:18,47:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,73:$Vj,74:$Vk},{17:108,21:$V1,25:$VF,45:18,47:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,73:$Vj,74:$Vk},{17:109,21:$V1,25:$VF,45:18,47:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,73:$Vj,74:$Vk},{17:110,21:$V1,25:$VF,45:18,47:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,73:$Vj,74:$Vk},o($VM,[2,17]),{17:111,21:$V1,25:$VF,45:18,47:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,73:$Vj,74:$Vk},{17:112,21:$V1,25:$VF,45:18,47:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,73:$Vj,74:$Vk},{17:113,21:$V1,25:$VF,45:18,47:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,73:$Vj,74:$Vk},{17:114,21:$V1,25:$VF,45:18,47:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,73:$Vj,74:$Vk},{17:115,21:$V1,25:$VF,45:18,47:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,73:$Vj,74:$Vk},o($VE,[2,61]),o($VE,[2,62]),{17:116,21:$V1,25:$VF,45:18,47:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,73:$Vj,74:$Vk},{17:117,21:$V1,25:$VF,45:18,47:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,73:$Vj,74:$Vk},{17:118,21:$V1,25:$VF,45:18,47:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,73:$Vj,74:$Vk},{17:119,21:$V1,25:$VF,45:18,47:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,73:$Vj,74:$Vk},{17:120,21:$V1,25:$VF,45:18,47:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,73:$Vj,74:$Vk},{17:121,21:$V1,25:$VF,45:18,47:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,73:$Vj,74:$Vk},{17:122,21:$V1,25:$VF,45:18,47:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,73:$Vj,74:$Vk},{17:123,21:$V1,25:$VF,45:18,47:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,73:$Vj,74:$Vk},{17:124,21:$V1,25:$VF,45:18,47:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,73:$Vj,74:$Vk},o($VO,[2,74],{19:$Vx,50:$VC}),o([24,26],$VG,{45:18,72:81,17:125,21:$V1,25:$VF,47:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,73:$Vj,74:$Vk}),o($VP,[2,18]),{7:84,8:83,9:127,10:$V0,14:11,15:9,17:10,20:17,21:$V1,25:$V2,26:[1,126],28:128,29:$V3,30:13,31:14,32:15,33:16,34:$V4,35:$V5,36:$V6,39:$V7,40:$V8,41:$V9,42:$Va,43:$Vb,44:$Vc,45:18,47:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,73:$Vj,74:$Vk,77:$Vl,78:$Vm,79:$Vn,80:$Vo,81:$Vp,82:$Vq},{7:132,8:131,9:82,10:$V0,14:11,15:9,17:10,20:17,21:$V1,25:$V2,26:[1,129],27:130,29:$V3,30:13,31:14,32:15,33:16,34:$V4,35:$V5,36:$V6,39:$V7,40:$V8,41:$V9,42:$Va,43:$Vb,44:$Vc,45:18,47:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,73:$Vj,74:$Vk,77:$Vl,78:$Vm,79:$Vn,80:$Vo,81:$Vp,82:$Vq},{24:$VQ,26:[1,133]},o($VR,[2,47]),o($VR,[2,43]),o($VR,[2,44]),o([10,21,25,29,34,35,36,39,40,41,42,43,44,67,68,69,70,71,73,74,77,78,79,80,81,82],$Vu,{18:51,19:$Vx,24:$VS,26:$VS,46:$Vy,47:$Vz,48:$VA,49:$VB,50:$VC,66:$VD,75:$Vv}),{17:135,21:$V1,25:$VF,45:18,47:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,73:$Vj,74:$Vk},{17:136,21:$V1,25:$VF,45:18,47:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,73:$Vj,74:$Vk},{39:[1,137]},{8:138,15:9,20:17,77:$Vl,78:$Vm,79:$Vn,80:$Vo,81:$Vp,82:$Vq},o($Vt,[2,39]),o($Vt,[2,40]),o($Vw,$Vu,{18:139,19:$Vx,46:$Vy,47:$Vz,48:$VA,49:$VB,50:$VC,66:$VD,75:$Vv}),o($Vt,[2,42]),o($Vt,[2,29]),o($Vw,$Vu,{18:140,19:$Vx,46:$Vy,47:$Vz,48:$VA,49:$VB,50:$VC,66:$VD,75:$Vv}),o($Vw,$Vu,{18:141,19:$Vx,46:$Vy,47:$Vz,48:$VA,49:$VB,50:$VC,66:$VD,75:$Vv}),o($VL,$VG,{45:18,17:125,72:142,21:$V1,25:$VF,47:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,73:$Vj,74:$Vk}),o($VK,[2,79]),{19:$Vx,22:[1,143],24:$VS,46:$Vy,47:$Vz,48:$VA,49:$VB,50:$VC,66:$VD},{22:[1,144],24:$VQ},{13:145,19:[1,146],25:[2,12]},{15:149,20:17,22:[1,147],23:148,77:$Vl,78:$Vm,79:$Vn,80:$Vo,81:$Vp,82:$Vq},o($Vw,$Vu,{18:150,19:$Vx,46:$Vy,47:$Vz,48:$VA,49:$VB,50:$VC,66:$VD,75:$Vv}),o($VT,[2,51],{19:$Vx,48:$VA,49:$VB,50:$VC}),o($VT,[2,52],{19:$Vx,48:$VA,49:$VB,50:$VC}),o($VO,[2,53],{19:$Vx,50:$VC}),o($VO,[2,54],{19:$Vx,50:$VC}),o($VU,[2,55],{19:$Vx,46:$Vy,47:$Vz,48:$VA,49:$VB,50:$VC,66:$VD}),o([5,10,21,22,24,25,26,29,34,35,36,39,40,41,42,43,44,66,67,68,69,70,71,73,74,75,77,78,79,80,81,82],[2,72],{19:$Vx,46:$Vy,47:$Vz,48:$VA,49:$VB,50:$VC}),o($VU,[2,73],{19:$Vx,46:$Vy,47:$Vz,48:$VA,49:$VB,50:$VC,66:$VD}),o($VU,[2,56],{19:$Vx,46:$Vy,47:$Vz,48:$VA,49:$VB,50:$VC,66:$VD}),o($VU,[2,57],{19:$Vx,46:$Vy,47:$Vz,48:$VA,49:$VB,50:$VC,66:$VD}),o($VU,[2,58],{19:$Vx,46:$Vy,47:$Vz,48:$VA,49:$VB,50:$VC,66:$VD}),o($VU,[2,59],{19:$Vx,46:$Vy,47:$Vz,48:$VA,49:$VB,50:$VC,66:$VD}),o($VU,[2,60],{19:$Vx,46:$Vy,47:$Vz,48:$VA,49:$VB,50:$VC,66:$VD}),o($VU,[2,63],{19:$Vx,46:$Vy,47:$Vz,48:$VA,49:$VB,50:$VC,66:$VD}),o($VU,[2,64],{19:$Vx,46:$Vy,47:$Vz,48:$VA,49:$VB,50:$VC,66:$VD}),o($VU,[2,65],{19:$Vx,46:$Vy,47:$Vz,48:$VA,49:$VB,50:$VC,66:$VD}),o($VU,[2,66],{19:$Vx,46:$Vy,47:$Vz,48:$VA,49:$VB,50:$VC,66:$VD}),o($VU,[2,67],{19:$Vx,46:$Vy,47:$Vz,48:$VA,49:$VB,50:$VC,66:$VD}),o($VU,[2,68],{19:$Vx,46:$Vy,47:$Vz,48:$VA,49:$VB,50:$VC,66:$VD}),o($VU,[2,69],{19:$Vx,46:$Vy,47:$Vz,48:$VA,49:$VB,50:$VC,66:$VD}),o($VU,[2,70],{19:$Vx,46:$Vy,47:$Vz,48:$VA,49:$VB,50:$VC,66:$VD}),o($VU,[2,71],{19:$Vx,46:$Vy,47:$Vz,48:$VA,49:$VB,50:$VC,66:$VD}),o($VV,$VS,{19:$Vx,46:$Vy,47:$Vz,48:$VA,49:$VB,50:$VC,66:$VD}),o($VP,[2,19]),o($VR,[2,48]),o([21,25,26,29,34,35,36,39,40,41,42,43,44,47,67,68,69,70,71,73,74],[2,49],{15:9,20:17,8:131,7:132,10:$V0,77:$Vl,78:$Vm,79:$Vn,80:$Vo,81:$Vp,82:$Vq}),o($VP,[2,20]),{7:84,8:83,9:127,10:$V0,14:11,15:9,17:10,20:17,21:$V1,25:$V2,26:[1,151],28:128,29:$V3,30:13,31:14,32:15,33:16,34:$V4,35:$V5,36:$V6,39:$V7,40:$V8,41:$V9,42:$Va,43:$Vb,44:$Vc,45:18,47:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,73:$Vj,74:$Vk,77:$Vl,78:$Vm,79:$Vn,80:$Vo,81:$Vp,82:$Vq},o($VR,[2,45]),o($VR,[2,46]),o($VK,[2,82]),{17:152,21:$V1,25:$VF,45:18,47:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,73:$Vj,74:$Vk},{19:$Vx,22:[1,153],46:$Vy,47:$Vz,48:$VA,49:$VB,50:$VC,66:$VD},{19:$Vx,22:[1,154],46:$Vy,47:$Vz,48:$VA,49:$VB,50:$VC,66:$VD},{21:[1,155]},o([21,25,47,67,68,69,70,71,73,74],$Vu,{18:156,75:$Vv}),o($Vt,[2,41]),o($Vt,[2,30]),o($Vt,[2,31]),{22:[1,157],24:$VQ},o($VK,[2,80]),o($VK,[2,83]),{14:158,25:$VW},{20:160,77:$Vl,78:$Vm,79:$Vn,80:$Vo,81:$Vp,82:$Vq},o($VX,[2,13]),{22:[1,161],24:[1,162]},o($VL,[2,15]),o($VN,[2,9]),o($VP,[2,21]),o($VV,[2,92],{19:$Vx,46:$Vy,47:$Vz,48:$VA,49:$VB,50:$VC,66:$VD}),{14:163,25:$VW},{9:164,14:11,17:10,21:$V1,25:$V2,29:$V3,30:13,31:14,32:15,33:16,34:$V4,35:$V5,36:$V6,39:$V7,40:$V8,41:$V9,42:$Va,43:$Vb,44:$Vc,45:18,47:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,73:$Vj,74:$Vk},{17:165,21:$V1,25:$VF,45:18,47:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,73:$Vj,74:$Vk},{17:166,21:$V1,25:$VF,45:18,47:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,73:$Vj,74:$Vk},o($VK,[2,81]),o($Vt,[2,8]),{7:84,8:83,9:82,10:$V0,14:11,15:9,17:10,20:17,21:$V1,25:$V2,26:$VH,27:79,28:80,29:$V3,30:13,31:14,32:15,33:16,34:$V4,35:$V5,36:$V6,39:$V7,40:$V8,41:$V9,42:$Va,43:$Vb,44:$Vc,45:18,47:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,73:$Vj,74:$Vk,77:$Vl,78:$Vm,79:$Vn,80:$Vo,81:$Vp,82:$Vq},{25:[2,11]},o($VX,[2,14]),{15:167,20:17,77:$Vl,78:$Vm,79:$Vn,80:$Vo,81:$Vp,82:$Vq},o($Vt,$VY,{37:168,38:$VZ}),o($Vt,[2,36]),{19:$Vx,22:[1,170],46:$Vy,47:$Vz,48:$VA,49:$VB,50:$VC,66:$VD},o([21,25,67,68,69,70,71,73,74],$Vu,{18:171,19:$Vx,46:$Vy,47:$Vz,48:$VA,49:$VB,50:$VC,66:$VD,75:$Vv}),o($VL,[2,16]),o($Vt,[2,32]),{14:173,25:$VW,36:[1,172]},o($Vt,$Vu,{18:174,75:$Vv}),{17:175,21:$V1,25:$VF,45:18,47:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,73:$Vj,74:$Vk},{21:[1,176]},o($Vt,[2,34]),o($Vt,[2,37]),{19:$Vx,22:[1,177],46:$Vy,47:$Vz,48:$VA,49:$VB,50:$VC,66:$VD},{17:178,21:$V1,25:$VF,45:18,47:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,73:$Vj,74:$Vk},{9:179,14:11,17:10,21:$V1,25:$V2,29:$V3,30:13,31:14,32:15,33:16,34:$V4,35:$V5,36:$V6,39:$V7,40:$V8,41:$V9,42:$Va,43:$Vb,44:$Vc,45:18,47:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,73:$Vj,74:$Vk},{19:$Vx,22:[1,180],46:$Vy,47:$Vz,48:$VA,49:$VB,50:$VC,66:$VD},o($Vt,[2,38]),{14:181,25:$VW},o($Vt,$VY,{37:182,38:$VZ}),o($Vt,[2,33])],
defaultActions: {3:[2,2],44:[2,1],160:[2,11]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        function lex() {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:/* ignore comment */
break;
case 2:/* ignore comment */
break;
case 3:return 79;
break;
case 4:return 43;
break;
case 5:return 34; 
break;
case 6:return 35;
break;
case 7:return 42;
break;
case 8:return 40;
break;
case 9:return 38;
break;
case 10:return 70;
break;
case 11:return 41;
break;
case 12:return 10
break;
case 13:return 36;
break;
case 14:return 81;
break;
case 15:return 78;
break;
case 16:return 'NOT';
break;
case 17:return 'NULL';
break;
case 18:return 80;
break;
case 19:return 82;
break;
case 20:return 44;
break;
case 21:return 69;
break;
case 22:return 77;
break;
case 23:return 39;
break;
case 24:return 73;
break;
case 25:return 74;
break;
case 26:return 25;
break;
case 27:return 26;
break;
case 28:return 'OPEN_BRACKET';
break;
case 29:return 'CLOSE_BRACKET';
break;
case 30:return 21;
break;
case 31:return 22;
break;
case 32:return 24;
break;
case 33:return 'COLON';
break;
case 34:return 75;
break;
case 35:return 19;
break;
case 36:return 16;
break;
case 37:return 51;
break;
case 38:return 56;
break;
case 39:return 46;
break;
case 40:return 52;
break;
case 41:return 57;
break;
case 42:return 47;
break;
case 43:return 53;
break;
case 44:return 48;
break;
case 45:return 54;
break;
case 46:return 49;
break;
case 47:return 55;
break;
case 48:return 50;
break;
case 49:return 58;
break;
case 50:return 59;
break;
case 51:return 60;
break;
case 52:return 61;
break;
case 53:return 62;
break;
case 54:return 63;
break;
case 55:return 64;
break;
case 56:return 65;
break;
case 57:return 71;
break;
case 58:return 66;
break;
case 59:return 5;
break;
case 60:return 68;
break;
case 61:return 67;
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:#.*)/,/^(?:bool\b)/,/^(?:break\b)/,/^(?:clear\b)/,/^(?:draw\b)/,/^(?:continue\b)/,/^(?:do\b)/,/^(?:else\b)/,/^(?:false\b)/,/^(?:for\b)/,/^(?:function\b)/,/^(?:if\b)/,/^(?:line\b)/,/^(?:num\b)/,/^(?:not\b)/,/^(?:null\b)/,/^(?:point\b)/,/^(?:polygon\b)/,/^(?:return\b)/,/^(?:true\b)/,/^(?:void\b)/,/^(?:while\b)/,/^(?:width\b)/,/^(?:height\b)/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:,)/,/^(?::)/,/^(?:;)/,/^(?:->)/,/^(?:=)/,/^(?:\+=)/,/^(?:\+\+)/,/^(?:\+)/,/^(?:-=)/,/^(?:--)/,/^(?:-)/,/^(?:\*=)/,/^(?:\*)/,/^(?:\/=)/,/^(?:\/)/,/^(?:%=)/,/^(?:%)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:\?=)/,/^(?:\?<)/,/^(?:\?>)/,/^(?:!=)/,/^(?:!>)/,/^(?:!<)/,/^(?:!)/,/^(?:~)/,/^(?:$)/,/^(?:[0-9]+(\.[0-9]*)?)/,/^(?:[a-zA-Z_]+[a-zA-Z0-9_]*)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = sketchParse;
exports.Parser = sketchParse.Parser;
exports.parse = function () { return sketchParse.parse.apply(sketchParse, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}
;
// end

/**
 * @namespace MVM
 */

var MVM = MVM || {};


/**
 * @classdesc The data management subsystem of MVM. It works by maintaining a stack of scope frames - themselves parts of a wider scope tree. Variable modifications are made by chaining up parent scopes when necessary.
 * @class MVM.DataModel
 * @public
 * @author FelixMcFelix (Kyle S.)
 */
MVM.DataModel = function(){
	this.root = new MVM.StackFrame(null);
	this.stack = [this.root];
};

MVM.DataModel.prototype = {
	/**
	 * Retrieve the currently active scope frame.
	 * @method MVM.DataModel#current
	 * @return {MVM.StackFrame}
	 * @public
	 */
	current: function(){
		try{
			return this.stack[this.stack.length - 1];
		} catch(e){
			return undefined;
		}
	},

	/**
	 * Retrieve the scope frame a set height above the current frame, where 0 retrieves the current frame.
	 * @method MVM.DataModel#relative
	 * @param {number} count - the target relative height to retrieve a scope frame from.
	 * @return {MVM.StackFrame}
	 * @public
	 */
	relative: function(count){
		var cursor = this.current();
		while(count>0 && cursor && cursor.parent){
			cursor = cursor.parent;
			count--;
		}

		if(count>0){
			throw "Invalid relative call - too few parents.";
		}

		return cursor;
	},

	/**
	 * Enter a new {@link MVM.StackFrame} - signifying a new block scope.
	 * @method MVM.DataModel#enter
	 * @return {MVM.DataModel} Returns self to allow for some degree of method chaining.
	 * @public
	 */
	enter: function(){
		var tmp = new MVM.StackFrame(this.current());
		this.stack[this.stack.length - 1] = tmp;

		return this;
	},

	/**
	 * Leave the current {@link MVM.StackFrame} - signifying an end to a block scope.
	 * @method MVM.DataModel#exit
	 * @return {MVM.DataModel} Returns self to allow for some degree of method chaining.
	 * @public
	 */
	exit: function(){
		if(this.current() !== this.root){
			this.stack[this.stack.length - 1] = this.current().parent;
		} else{
			throw "Tried to exit from scope past root level.";
		}

		return this;
	},

	/**
	 * Call a function at another point in the code, moving any relevant data into the new {@link MVM.StackFrame}.
	 * @method MVM.DataModel#call
	 * @param {number} argc - the amount of arguments to copy into the new scope.
	 * @param {number} rel - the relative height in scope frames of where the function declaration occurred.
	 * @param {number} ret - the address the {@link MVM.VM} must return to once the function ends.
	 * @return {MVM.DataModel} Returns self to allow for some degree of method chaining.
	 * @public
	 */
	call: function(argc, rel, ret){
		var prev = this.current();
		var parent = this.relative(rel);
		this.stack.push(new MVM.StackFrame(parent));

		var c = this.current();
		c.returnAddr = ret;
		c.functionBase = true;

		while (argc>0){
			c.setVar(argc-1, prev.pop());	
			argc--;
		}

		return this;
	},

	/**
	 * Return from the current function, moving back to the original scope.
	 * @method MVM.DataModel#funcreturn
	 * @param {*} value - the value to place into the {@link MVM.StackFrame} which we are returning to.
	 * @return {number} The return address that the {@link MVM.VM} must utilise.
	 * @public
	 */
	funcreturn: function(value){
		var p = this.stack.pop();

		while(!p.functionBase){
			p = p.parent;
		}
		
		if (value!==null) {
			this.current().push(value);
		}

		return p.returnAddr;
	}
};

/**
 * @classdesc An individual stack frame used by the {@link MVM.DataModel}.
 * @class MVM.StackFrame
 * @public
 * @author FelixMcFelix (Kyle S.)
 */
MVM.StackFrame = function(parent){
	this.parent = parent;
	this.variables = [];
	this.stack = [];
	this.returnAddr = undefined;
	this.functionBase = false;
};

MVM.StackFrame.prototype = {
	/**
	 * Push a new value to the top of the stack.
	 * @method MVM.StackFrame#push
	 * @param {*} value - the value to place onto the top of the stack.
	 * @return {MVM.StackFrame} Returns self to allow for some degree of method chaining.
	 * @public
	 */
	push: function(value){
		this.stack.push(value);

		return this;
	},

	/**
	 * Pop off the top value from the stack, and return it.
	 * @method MVM.StackFrame#pop
	 * @return {*} The value retrieved from the top of the stack.
	 * @public
	 */
	pop: function(){
		return this.stack.pop();
	},

	/**
	 * Return the top value of the stack without modifying the frame's state.
	 * @method MVM.StackFrame#peek
	 * @return {*} The value retrieved from the top of the stack.
	 * @public
	 */
	peek: function(){
		try {
			return this.stack[this.stack.length-1];
		} catch (e){
			return undefined;
		}
	},

	/**
	 * Set a variable in this stack frame to a given value.
	 * @method MVM.StackFrame#setVar
	 * @param {number} varNo - the index of the variable's location.
	 * @param {*} value - the value to place into the variable store.
	 * @return {MVM.StackFrame} Returns self to allow for some degree of method chaining.
	 * @public
	 */
	setVar: function(varNo, val){
		this.variables[varNo] = val;

		return this;
	},

	/**
	 * Get the value of a variable in this stack frame.
	 * @method MVM.StackFrame#getVar
	 * @param {number} varNo - the index of the variable's location.
	 * @return {*} The value obtained from the specified variable index.
	 * @public
	 */
	getVar: function(varNo){
		return this.variables[varNo];
	}
};
/*
* Sketch Virtual Machine
* Darren Findlay
*
* 15th January 2015
*
*/

var MVM = MVM || {};

/**
 * @classdesc The virtual machine used to execute Sketch programs.
 * @class MVM.VM
 * @param {WebGLRenderingContext} glctx - WebGL context of the canvas to operate on.
 * @param {Palette.Manager} manager - Shader Manager used to abstract draw calls and shader manipulation.
 * @param {Array} codeStore - MVM program code generated by an instance of {@link Sketch.SketchGen}.
 * @param {boolean} debugMode - print additional information to the console during execution.
 * @public
 * @author Darren Findlay
 */
MVM.VM = function(glctx, manager, codeStore, debugMode) {

	/*
	*	Struct layouts
	*	
	*				  x    y
	*	Point 		[100, 150]
	*
	*				  r    g   b   a   x1  y1  x2  y2
	*	Line 		[ 0 ,  0 ,255,255,100,100,200,200]
	*
	*				  r    g   b   a   x1  y1  x2  y2  x3  y3 	0 or More points
	*	Polygon 	[ 0 ,  0 ,255,255,100,100,200,200,150, 0 ,.............]
	*
	*/

	//TEMP
	var constantPool = [];
	var labelTable = [];

	// WebGL context
	var glctx = glctx;

	// Shader manager
	var manager = manager;

	// Loop Counter - For debugging
	var lc = 0;

	// Points to the next instruction in the code store to execute
	var cp = 0;

	// Points to the first free location after the program
	var cl;

	// Data store (Stack)
	window.MVM.dataStore = [];
	var data = new MVM.DataModel();

	// Points to the first free space at the top of the data store
	var sp = 0;

	// Points to the first location of the top most frame
	var fp = 0;

	// Local Offset. The off set of the first local address from the frame pointer
	var LO = 2;

	// Address of the dynamic link in a frame
	var DLA = 0;

	// Address of the retrun address of a frame
	var RA = 1;

	// Global data store
	var globalStore = [];

	// Flags wether the virtual machine should hand over control
	// to the browser so te canvas can be rendered
	var needsUpdate = 0;

	this.dead = false;

	this.interpret = function() {
		if(this.dead === true){
			return;
		}

		var dataStore = window.MVM.dataStore;

		if(debugMode) console.log(codeStore);

		cl = codeStore.length;

		var opCodes = MVM.opCodes;
		while (cp < cl && needsUpdate == 0) {
			lc++
			var opCode = codeStore[cp];
			cp++;
			switch (opCode) {
				case opCodes.STOREG:
					//Store a value in a given relative stack frame, in a given index.
					//USE: STOREG index
					//e.g. STORER 0 stores the top value on the stack in slot 0 of the root scope frame.
					var ind = codeStore[cp++];
					var val = data.current()
								  .pop();

					data.root
						.setVar(ind, val);

					if(debugMode) console.log("STOREG: " + val + " in index " + ind);
					break;
				case opCodes.LOADG:
					//Load a value from the root scope frame onto the current stack, from a given index.
					//USE: LOADG index
					//e.g. LOADG 0 loads the value in slot 0 of the root scope frame.
					var ind = codeStore[cp++];	
					var val = data.root
								  .getVar(ind);

					data.current()
						.push(val);

					if(debugMode) console.log("LOADG: " + val + " from index " + ind);
					break;
				case opCodes.STOREL:
					//Store a value in the current scope frame, in a given index.
					//USE: STOREL index
					//e.g. STOREL 0 stores the top value on the stack in slot 0 of the current scope frame.
					var ind = codeStore[cp++];
					var val = data.current()
								  .pop();

					data.current()
						.setVar(ind, val);

					if(debugMode) console.log("STOREL: " + val + " in index " + ind);
					break;
				case opCodes.LOADL:
					//Load a value from the current scope frame onto the current stack, from a given index.
					//USE: LOADL index
					//e.g. LOADL 0 loads the value in slot 0 of the data stack frame.
					var ind = codeStore[cp++];	
					var val = data.current()
								  .getVar(ind);

					data.current()
						.push(val);

					if(debugMode) console.log("LOADL: "  + val + " from index " + ind);
					break;
				case opCodes.LOADC:
					//Place the next codeword on the top of the stack.
					var constant = codeStore[cp++];

					data.current()
						.push(constant);

					if(debugMode) console.log("LOADC: " + constant);
					break;
				case opCodes.IADD:
					//Pop two integers off the stack, add them and push the new result onto the stack.
					var i = Math.floor(
						data.current()
							.pop());
					var j = Math.floor(
						data.current()
							.pop());
					var result = j + i;

					data.current()
						.push(result);

					if(debugMode) console.log("IADD: " + j + " + " + i + " = " + result);
					break;
				case opCodes.ISUB:
					//Pop two integers off the stack, subbtract them and push the new result onto the stack.
					var i = Math.floor(
						data.current()
							.pop());
					var j = Math.floor(
						data.current()
							.pop());
					var result = j - i;

					data.current()
						.push(result);

					if(debugMode) console.log("ISUB: " + j + " - " + i + " = " + result);
					break;
				case opCodes.IMUL:
					//Pop two integers off the stack, multiply them and push the new result onto the stack.
					var i = Math.floor(
						data.current()
							.pop());
					var j = Math.floor(
						data.current()
							.pop());
					var result = j * i;

					data.current()
						.push(result);

					if(debugMode) console.log("IMUL: " + j + " * " + i + " = " + result);
					break;
				case opCodes.IDIV:
					//Pop two integers off the stack, divide them and push the new result onto the stack.
					var i = Math.floor(
						data.current()
							.pop());
					var j = Math.floor(
						data.current()
							.pop());

					var result = Math.floor(j / i);
					
					data.current()
						.push(result);

					if(debugMode) console.log("IDIV: " + j + " / " + i + " = " + result);
					break;
				case opCodes.IMOD:
					//Pop two integers off the stack, take modulus and push the new result onto the stack.
					var i = Math.floor(
						data.current()
							.pop());
					var j = Math.floor(
						data.current()
							.pop());
					var result = Math.floor(j % i);
					
					data.current()
						.push(result);

					if(debugMode) console.log("IMOD: " + j + " % " + i + " = " + result);
					break;
				case opCodes.FADD:
					//Pop two integers off the stack, add them and push the new result onto the stack.
					var i = data.current()
							.pop();
					var j = data.current()
							.pop();
					var result = j + i;

					data.current()
						.push(result);

					if(debugMode) console.log("FADD: " + j + " + " + i + " = " + result);
					break;
				case opCodes.FSUB:
					//Pop two integers off the stack, subtract them and push the new result onto the stack.
					var i = data.current()
							.pop();
					var j = data.current()
							.pop();
					var result = j - i;

					data.current()
						.push(result);

					if(debugMode) console.log("FSUB: " + j + " - " + i + " = " + result);
					break;
				case opCodes.FMUL:
					//Pop two integers off the stack, multiply them and push the new result onto the stack.
					var i = data.current()
							.pop();
					var j = data.current()
							.pop();
					var result = j * i;

					data.current()
						.push(result);

					if(debugMode) console.log("FMUL: " + j + " * " + i + " = " + result);
					break;
				case opCodes.FDIV:
					//Pop two integers off the stack, divide them and push the new result onto the stack.
					var i = data.current()
							.pop();
					var j = data.current()
							.pop();
					var result = j / i;

					data.current()
						.push(result);

					if(debugMode) console.log("FDIV: " + j + " / " + i + " = " + result);
					break;
				case opCodes.FMOD:
					//Pop two integers off the stack, divide them and push the remainder onto the stack.
					var i = data.current()
							.pop();
					var j = data.current()
							.pop();
					var result = j % i;

					data.current()
						.push(result);

					if(debugMode) console.log("FMOD: " + j + " % " + i + " = " + result);
					break;
				case opCodes.CMPEQ:
					//Pop two values off the stack, push true if they equate or false if they do not.
					var i = data.current()
							.pop();
					var j = data.current()
							.pop();

					var result = (j == i);
					
					data.current()
						.push(result);

					if(debugMode) console.log("CMPEQ: " + j + " == " + i + " = " + result);
					break;
				case opCodes.CMPLT:
					var i = data.current()
							.pop();
					var j = data.current()
							.pop();

					var result = (j < i);
					
					data.current()
						.push(result);
					if(debugMode) console.log("CMPLT: " + j + " < " + i + " = " + result);
					break;
				case opCodes.CMPGT:
					var i = data.current()
							.pop();
					var j = data.current()
							.pop();

					var result = (j > i);
					
					data.current()
						.push(result);
					if(debugMode) console.log("CMPGT: " + j + " > " + i + " = " + result);
					break;
				case opCodes.JUMP:
					//Jump to another part of the program unconditionally.
					//USE: JUMP address

					var address = codeStore[cp];
					cp = address;

					if(debugMode) console.log("JUMP: " + address);
					break;
				case opCodes.JUMPT:
					//Jump to another part of the program if the top value on the stack is true.
					//USE: JUMPT address

					var address = codeStore[cp++];
					
					var i = data.current()
								.pop();
					if (i) {
						cp = address;
					}

					if(debugMode) console.log("JUMPT: to " + address + ", cond is " + i);
					break;
				case opCodes.JUMPF:
					//Jump to another part of the program if the top value on the stack is false.
					//USE: JUMPF address

					var address = codeStore[cp++];
					
					var i = data.current()
								.pop();
					if (!i) {
						cp = address;
					}
					
					if(debugMode) console.log("JUMPF: to " + address + ", cond is " + i);
					break;
				case opCodes.CALL:
					//Call a function.
					//USE: CALL definitionHeight codeAddress numArgs
					//e.g. CALL 1 90 3 calls a function starting at code address 90, defined 1 scope frame above the call site with 3 parameters.

					var definitionHeight = codeStore[cp++];
					var codeAddress = codeStore[cp++];
					var numArgs = codeStore[cp++];

					var returnAddress = cp;

					data.call(numArgs, definitionHeight, returnAddress);
					cp = codeAddress;

					if(debugMode) console.log("CALL: " + codeAddress + "  with " + numArgs + " arguments, return to " + returnAddress);
					break;
				case opCodes.RETURNVAL:
					//Return from a function, taking the top value from the stack from the function scope and placing it onto the resumed scope.
					//USE: RETURNVAL
					var value = data.current()
									.pop();

					cp = data.funcreturn(value);

					if(debugMode) console.log("RETURNVAL: " + value + " returned, exiting function. New code pointer is "+cp);
					break;
				case opCodes.RETURN:
					//Return from a function, returning no value.
					//USE: RETURN
					cp = data.funcreturn(null);

					if(debugMode) console.log("RETURN: void return, exiting function.");
					break;
				case opCodes.LNDRAW:
					// Get line from top of stack, and then draw it? What more is there to say?
					var lineStruct = data.current()
								  		 .pop();

					var r = lineStruct[0];
					var g = lineStruct[1];
					var b = lineStruct[2];
					var a = lineStruct[3];
					var pt1x = lineStruct[4];
					var pt1y = lineStruct[5];
					var pt2x = lineStruct[6];
					var pt2y = lineStruct[7];

					var theLine = new Float32Array([pt1x,pt1y,0, pt2x,pt2y,0]);
					var theColor = new Float32Array([r,g,b,a]);

					var prog = manager.getProgram("square", "square");
					var canWidth = glctx.canvas.width;
					var canHeight = glctx.canvas.height;
					prog.setDrawMode(Palette.Program.LINES);
					prog.draw(theLine, {width:[canWidth], height: [canHeight]}, {color: theColor})

					if(debugMode) console.log("LNDRAW: " + lineStruct);
					break;
				case opCodes.PGDRAW:
					// Get polygon from top of stack, and then draw it? What more is there to say?
					var polygonStruct = data.current()
								  			.pop();

					var r = polygonStruct[0];
					var g = polygonStruct[1];
					var b = polygonStruct[2];
					var a = polygonStruct[3];
					var theColor = new Float32Array([r,g,b,a]);

					var points = polygonStruct.slice(4);
					// var i;
					// for (i = 4; i < polygonStruct.length; i+=2) {
					// 	var pt = [polygonStruct[i],polygonStruct[i+1]];
					// 	points.push(pt);
					// }
					var prog = manager.getProgram("square", "square");
					prog.setDrawMode(Palette.Program.POLYGON);
					var canWidth = glctx.canvas.width;
					var canHeight = glctx.canvas.height;

					prog.draw(points, {width:[canWidth], height: [canHeight]}, {color: theColor})
					if(debugMode) console.log("PGDRAW: " + polygonStruct);
					break;
				case opCodes.RENDER:
					needsUpdate = 1;
					if(debugMode) console.log("RENDER");
					break;
				case opCodes.CLEAR:
					//Pop an element off the stack. If it is a colour, set it as the clear colour - if not, use the current clear colour.
					var colour = data.current()
									 .pop();
					if(colour){
						if(colour.length<4){
							colour[3] = 1.0;
						}

						glctx.clearColor(colour[0],colour[1],colour[2],colour[3]);
					}
					
					glctx.clear(glctx.COLOR_BUFFER_BIT|glctx.DEPTH_BUFFER_BIT);
					if(debugMode) console.log("CLEAR");
					break;
				case opCodes.EXIT:
					//Ends program operation.
					//USE: EXIT
					cp = cl;
					if(debugMode) console.log("EXIT");
					break;
				case opCodes.LOADIDX:
					var constPoolindex = codeStore[cp];
					cp++;
					var arrayIndex = codeStore[cp];
					cp++;
					var arr = constantPool[constPoolindex];
					var value = arr[arrayIndex];
					dataStore[sp] = value;
					sp++;
					if(debugMode) console.log("LOADIDX: constant pool index " + constPoolindex + " array index: " + arrayIndex);
					break;
				case opCodes.SETIDX:
					var constPoolindex = codeStore[cp];
					cp++;
					var arrayIndex = codeStore[cp];
					cp++;
					var arr = constantPool[constPoolindex];
					sp--;
					var value = dataStore[sp];
					arr[arrayIndex] = value;
					if(debugMode) console.log("SETIDX: constant pool index " + constPoolindex + " array index: " + arrayIndex);
					break;
				case opCodes.LNTOPG:
					sp--;
					var lineAddress = dataStore[sp];
					sp--;
					var numSides = dataStore[sp];
					var line = constantPool[lineAddress];
					var polygon = line.slice(0);
					var i = 2;
					var angle = 360 / numSides;
					var pt1xIdx = 4;
					var pt1yIdx = 5;
					var pt2xIdx = 6;
					var pt2yIdx = 7;
					var pt3xIdx = 8;
					var pt3yIdx = 9;
					while(i < numSides) {
						var pivot = [polygon[pt1xIdx],polygon[pt1yIdx]];
						var point = [polygon[pt2xIdx],polygon[pt2yIdx]];
						var newpt = rotatePoint(pivot,point,angle);
						// Shift new point
						offSetx = polygon[pt1xIdx] - polygon[pt2xIdx];
						offSety = polygon[pt1yIdx] - polygon[pt2yIdx];
						newpt[0] -= offSetx;
						newpt[1] -= offSety;
						// Add new point to polygon
						polygon[pt3xIdx] = newpt[0];
						polygon[pt3yIdx] = newpt[1];
						pt1xIdx += 2;
						pt1yIdx += 2;
						pt2xIdx += 2;
						pt2yIdx += 2;
						pt3xIdx += 2;
						pt3yIdx += 2;
						i++;
					}
					var targetAddress = codeStore[cp];
					cp++;
					constantPool[targetAddress] = polygon;
					if(debugMode) console.log("LNTOPG " + polygon);
					break;
				case opCodes.PTADD:
					//Pop two points off the stack, then place a white line generated by this back onto the stack.
					var pt2 = data.current()
								  .pop();
					var pt1 = data.current()
								  .pop();
					
					var line = [1,1,1,1,pt1[0],pt1[1],pt2[0],pt2[1]];
					
					data.current()
						.push(line);

					if(debugMode) console.log("PTADD " + line);
					break;
				case opCodes.LNMUL:
					sp--;
					var mulValue = dataStore[sp];
					sp--;
					var lineAddress = dataStore[sp];
					var line = constantPool[lineAddress];
					pt1x = line[4];
					pt1y = line[5];
					pt2x = line[6];
					pt2y = line[7];

					var xDist = pt2x - pt1x;
					var yDist = pt2y - pt1y;

					var xLen = (xDist * mulValue) - xDist; 
					var yLen = (yDist * mulValue) - yDist; 

					var targetLineAddress = codeStore[cp];
					cp++;

					var newLine = line.slice(0);
					newLine[6] += xLen;
					newLine[7] += yLen;
					newLine[0] = 0;
					newLine[1] = 1;
					newLine[2] = 0;
					newLine[3] = 1;
					constantPool[targetLineAddress] = newLine;
					if(debugMode) console.log("LNMUL " + newLine);
					break;
				//Augmentations to support scoping.
				case opCodes.STORER:
					//Store a value in a given relative stack frame, in a given index. (Store Relative)
					//USE: STORER stack index
					//e.g. STORER 1 0 stores the top value on the stack in slot 0 of the data stack frame above the current one.
					var rel = codeStore[cp++];
					var ind = codeStore[cp++];
					var val = data.current()
								  .pop();

					data.relative(rel)
						.setVar(ind, val);

					if(debugMode) console.log("STORER: placed "+val+" in index "+ind+" of relative frame "+rel+".");
					break;
				case opCodes.LOADR:
					//Load a value from a relative stack frame, from a given index. (Load Relative)
					//USE: LOADR stack index
					//e.g. LOADR 2 0 loads the value in slot 0 of the data stack frame 2 layers above the current one.
					var rel = codeStore[cp++];
					var ind = codeStore[cp++];	
					var val = data.relative(rel)
								  .getVar(ind);

					data.current()
						.push(val);

					if(debugMode) console.log("LOADR: retrieved "+val+" from index "+ind+" of relative frame "+rel+".");
					break;
				case opCodes.POPSC:
					//Pop off and discard the current stack data frame, equivalent to leaving a code block. (Pop Scope)
					//USE: POPSC
					if(debugMode){
						console.log("POPSC: exiting scope:");
						console.log(data.current());
					}
					data.exit();

					if(debugMode) console.log("POPSC: exited current block level.");
					break;
				case opCodes.PUSHSC:
					//Create and push a new stack data frame, equivalent to entering a code block. (Push Scope)
					//USE: PUSHSC
					data.enter();

					if(debugMode) console.log("PUSHSC: entered new block level.");
					break;

				//BOOLEAN OPERANDS
				case opCodes.BAND:
					//Pop two values off the stack, push A && B.
					var i = data.current()
							.pop();
					var j = data.current()
							.pop();

					var result = (j && i);
					
					data.current()
						.push(result);

					if(debugMode) console.log("BAND: " + j + " && " + i + " = " + result);
					break;
				case opCodes.BOR:
					//Pop two values off the stack, push A || B.
					var i = data.current()
							.pop();
					var j = data.current()
							.pop();

					var result = (j || i);
					
					data.current()
						.push(result);

					if(debugMode) console.log("BOR: " + j + " || " + i + " = " + result);
					break;
				case opCodes.BNEG:
					//Pop one value off the stack, push !A.
					var i = data.current()
								.pop();

					var result = !i;
					
					data.current()
						.push(result);

					if(debugMode) console.log("BNEG: !" + i + " = " + result);
					break;
				case opCodes.AGGR:
					//Aggregate a set of elements from the stack into an array.
					//USE: AGGR num
					//e.g. AGGR 3 pops 3 elements a, b, anc c from the stack and pushes [a,b,c] to the stack.
					var num = codeStore[cp++];
					var out = [];

					while(num-- > 0){
						var i = data.current()
									.pop();
						out.unshift(i);
					}

					data.current()
						.push(out);

					if(debugMode) console.log("AGGR: output " + out);
					break;
				case opCodes.WIDTH:
					//Push the width of the canvas onto the stack. Since this can't be gleaned normally.
					data.current()
						.push(glctx.canvas.width);

					if(debugMode) console.log("WIDTH: " + glctx.canvas.width);
					break;
				case opCodes.HEIGHT:
					//Push the height of the canvas onto the stack. Since this can't be gleaned normally.
					data.current()
						.push(glctx.canvas.height);

					if(debugMode) console.log("WIDTH: " + glctx.canvas.height);
					break;
				case opCodes.AUGPT:
					//Pop two structs off the stack, identify which is the point and append it to the line/poly.
					var i = data.current()
								.pop();
					var j = data.current()
								.pop();

					var out;

					if(i.length>j.length){
						out = i.concat(j);
					} else{
						out = j.concat(i);
					}

					data.current()
						.push(out);

					if(debugMode) console.log("AUGPT: " +i+ " + " +j+ " = " +out);
					break;
				case opCodes.SETCOLOUR:
					//Pop one line/poly and one point, use the point to define the colour for that shape...
					var colour = data.current()
								.pop();
					var shape = data.current()
								.pop();

					if(colour.size === 3){
						colour[3] = 1;
					}

					for(var i = 0; i< colour.length; i++){
						shape[i] = colour[i];
					}

					data.current()
						.push(shape);

					if(debugMode) console.log("SETCOLOUR: " +shape+ " ~ " +colour+ " = " +out);
					break;
				case opCodes.TRANSLATEPT:
					//Pop off twom points, move top of stack by the necessary distance.
					var vectr = data.current()
									.pop();
					var point = data.current()
									.pop();

					var out = point.slice();

					for (var i = 0; i < vectr.length; i++) {
						out[i] += vectr[i];
					};

					data.current()
						.push(out);

					if(debugMode) console.log("TRASLATEPT: [" +point+ "] -> [" +vectr+ "] = [" +out+"]");
					break;
				case opCodes.TRANSLATESTRUCT:
					//Pop off twom points, move top of stack by the necessary distance.
					var vectr = data.current()
									.pop();
					var strct = data.current()
									.pop();

					var out = strct.slice();

					// alert("["+out+"]");

					for (var i = 4; i < strct.length; i++) {
						out[i] += vectr[i%2];
					};

					data.current()
						.push(out);

					if(debugMode) console.log("TRASLATESTRUCT: [" +strct+ "] -> [" +vectr+ "] = [" +out+"]");
					break;
			}
			// remove garbage from stack
			//dataStore.splice(sp,dataStore.length - sp);
			//if(debugMode) console.log(JSON.stringify(dataStore));
		}
		if (needsUpdate) {render();}
		return data;
	};

	// Passes control to the browser to update the canvas and
	// requests a call back to start interpreting once the rendering has
	// complete
	render = function() {
		needsUpdate = 0;
		window.requestAnimationFrame(window.mvm.interpret);
	}

	this.call = function(address, args){
		var returnAddress = codeStore.length;
		for (var i = 0; i < args.length; i++) {
			data.current()
				.push(args[i]);
		};
		data.call(args.length, 0, returnAddress);
		// data.funcreturn();
		cp = address;

		return this.interpret();
	};

	this.kill = function(){
		this.dead = true;
	};

	// angle parameter in deegrees
	function rotatePoint(pivot, point, angle) {
		// Get origin x, y
		var pivx = pivot[0];
		var pivy = pivot[1];
		// Get point x, y
		var ptx = point[0];
		var pty = point[1];
		// Get sin and cos of angle
		var s = Math.sin((angle) * (Math.PI/180));
		var c = Math.cos((angle) * (Math.PI/180));
		// Translate point back to origin
		ptx -= pivx;
		pty -= pivy;
		// Rotate point
		var newx = ptx * c - pty * s;
		var newy = ptx * s + pty * c;
		// Translate new point back
		newx += pivx;
		newy += pivy;
		// Create new point
		var newPt = [newx,newy];
		return newPt;
	}
}

MVM.opCodes = {
	STOREG: 0,
	LOADG: 	1,
	STOREL: 2,
	LOADL: 	3,
	LOADC: 	4,
	IADD: 	5,
	ISUB: 	6,
	IMUL: 	7,
	IDIV: 	8,
	IMOD: 	9,
	FADD: 	10,
	FSUB: 	11,
	FMUL: 	12,
	FDIV: 	13,
	FMOD: 	14,
	LOADIDX:15,
	SETIDX: 16,
	CMPEQ: 17,
	CMPLT: 18,
	CMPGT: 19,
	JUMP: 	20,
	JUMPT: 	21, 
	JUMPF: 	22,
	CALL: 	23, 
	RETURN: 24,
	LNDRAW: 25,
	PGDRAW: 26,
	RENDER: 27,
	CLEAR: 	28,
	PTADD: 	29,
	LNTOPG: 30,
	LNMUL:  31,
	EXIT: 	32,
	STORER: 33,
	LOADR:	34,
	POPSC:	35,
	PUSHSC:	36,
	RETURNVAL: 37,
	BAND:	38,
	BOR:	39,
	BNEG:	40,
	AGGR: 	41,
	WIDTH:	42,
	HEIGHT:	43,
	AUGPT:	44,
	SETCOLOUR:	45,
	TRANSLATEPT:	46, 
	TRANSLATESTRUCT:	47
};

;
// end

/* global MVM */
/*jshint sub: true */
var Sketch = Sketch || {};

/**
 * @classdesc Creates an instance of the SketchGen module. SketchGen takes a JSON tree output by the default Jison generated parser and outputs MVM bytecode used to drive computations and canvas operations.
 * @class Sketch.SketchGen
 * @public
 * @author FelixMcFelix (Kyle S.)
 */

Sketch.SketchGen = function(){
	var outBuffer = [];
	var programCounter = 0;
	var scopeStack = [];
	var stackPtr = 0;
	var functionStack = [];

	var DEBUG = false;

	var instructions = Sketch.bindInstructions(this);

	/**
	 * Write a value to the next available code word.
	 * @method Sketch.SketchGen#emit
	 * @param {*} code - the code word or data value to be written into the next slot.
	 * @returns {number} - the address which was just written to.
	 * @public
	 */
	this.emit = function(code){
		outBuffer.push(code);
		return programCounter++;
	};

	/**
	 * Replace a code value at a given address.
	 * @method Sketch.SketchGen#patch
	 * @param {number} addr - the code address to be replaced.
	 * @param {*} code - the value to write to the code store.
	 * @returns void
	 * @public
	 */
	this.patch = function(addr, code){
		outBuffer[addr] = code;
	};

	/**
	 * Return the current program counter value.
	 * @method Sketch.SketchGen#pc
	 * @returns {number} - the current program counter value.
	 * @public
	 */
	this.pc = function(){
		return programCounter;
	};

	/**
	 * Interpret an AST node using the current code generator.
	 * @method Sketch.SketchGen#interpretNode
	 * @param {{type: number, arguments: *}} node - the AST node to be processed in the production of the current code store.
	 * @param {*} opt - an optional parameter to be passed to the individual node handler function.
	 * @returns {{type: string}}
	 * @public
	 */
	this.interpretNode = function(node, opt){
		if(Array.isArray(node)){
			node.forEach(this.interpretNode.bind(this));
		} else if(node === ""){
			return;
		} else{
			if(DEBUG){
				console.log("{\n"+Sketch.SketchGenNodes._rev[node.type]+",");
				console.log(node.arguments);
				console.log("}");
			}
			return instructions[node.type](node.arguments, opt);
		}
	};

	/**
	 * Push a new program scope frame.
	 * @method Sketch.SketchGen#scopePush
	 * @param {boolean} [noEmit=false] - specifies whether push and pop commands should not be written to the program as a side effect. This should be true for function definitions.
	 * @returns void
	 * @public
	 */
	this.scopePush = function(noEmit){
		scopeStack.push(new Sketch.SketchGen.ScopeStackFrame());
		stackPtr++;
		if(noEmit){
			return;
		}
		this.emit(MVM.opCodes.PUSHSC);
	};

	/**
	 * Pop off the current program scope frame.
	 * @method Sketch.SketchGen#scopePop
	 * @param {boolean} [noEmit=false] - specifies whether push and pop commands should not be written to the program as a side effect. This should be true for function definitions.
	 * @returns void
	 * @public
	 */
	this.scopePop = function(noEmit){
		scopeStack.pop();
		stackPtr--;
		if(noEmit){
			return;
		}
		this.emit(MVM.opCodes.POPSC);

		// TODO: Patch missed function calls (equivalent to hoisting).
		// TODO: Handle missed variable lookups in a different manner.
	};

	/**
	 * Register a label in the current scope frame.
	 * @method Sketch.SketchGen#scopeRegister
	 * @param {string} label - the variable name to register.
	 * @param {string} type - the data type that the variable will be declared with.
	 * @param {object=} extra - any extra data that could be required when handling this label (for example, function definitions).
	 * @returns void
	 * @public
	 */
	this.scopeRegister = function(label, type, extra){
		var curFrame = scopeStack[stackPtr];

		if (!curFrame.labelTable[label]){
			var destAddr = (type === "function") ? programCounter : curFrame.nextData++;
			curFrame.labelTable[label] = new Sketch.SketchGen.Label(destAddr, type, extra);
		} else {
			throw "Illegal attempt to redefine variable "+label+".";
		}
	};

	/**
	 * Search for a reference to a label (a variable) within the program scope.
	 * @method Sketch.SketchGen#scopeLookup
	 * @param {string} label - the variable name to lookup.
	 * @returns {{entry: Sketch.SketchGen.Label, stack: number}} - an object detailing the height of the referenced label, its address and its type as well as any extra data.
	 * @public
	 */

	this.scopeLookup = function(label){
		var stack = 0;
		var out = null;

		for(null; stackPtr-stack>=0; stack++){
			var frame = scopeStack[stackPtr-stack];
			var entry = frame.labelTable[label];
			if (entry){
				out = {entry: entry, stack: stack};
				break;
			}
		}

		if (out === null){
			throw "BAD LOOKUP.";
		}

		return out;
	};

	/**
	 * Compile a Sketch program.
	 * @method Sketch.SketchGen#interpret
	 * @param {Object} program - an AST object generated by the Jison parser.
	 * @returns number[] - an array of opcodes and literals to be parsed by MVM.
	 * @public
	 */
	this.interpret = function(program){
		this.cleanState();

		this.interpretNode({type: Sketch.SketchGenNodes["program"], arguments: program});

		var iaddr = null, raddr = null;

		try{
			var t = this.scopeLookup("init");
			if(t.entry.type === "function"){
				iaddr = t.entry.address;
			}
		} catch(e){}
		try{
			var d = this.scopeLookup("render");
			if(d.entry.type === "function"){
				raddr = d.entry.address;
			}
		} catch(e){}

		return {code: outBuffer, initAddr: iaddr, renderAddr: raddr};
	};

	/**
	 * Reset the internal object state to allow onject reuse when compiling a new program.
	 * @method Sketch.SketchGen#cleanSlate
	 * @returns void
	 * @public
	 */
	this.cleanState = function(){
		outBuffer = [];
		programCounter = 0;
		scopeStack = [];
		scopeStack.push(new Sketch.SketchGen.ScopeStackFrame());
		stackPtr = 0;
		functionStack = [];
	};

	/**
	 * Tell the generator that we are beginning a function definition, so that we can ensure that returns have the right type.
	 * @method Sketch.SketchGen#beginFunction
	 * @param {string} type - the return type of the function we are working on.
	 * @returns void
	 * @public
	 */
	this.beginFunction = function(type){
		functionStack.push(type);
	};

	/**
	 * Tell the generator that we are ending a function definition.
	 * @method Sketch.SketchGen#endFunction
	 * @returns void
	 * @public
	 */
	this.endFunction = function(){
		functionStack.pop();
	};

	/**
	 * Request the type of the current function definition.
	 * @method Sketch.SketchGen#currentFunctionType
	 * @returns {string}
	 * @public
	 */
	this.currentFunctionType = function(){
		if(functionStack.length === 0){
			throw "Not currently defining a function, can't find its type!"
		}
		return functionStack[functionStack.length-1];
	};
}

/**
 * @classdesc Simple semantic class for use in the {@link Sketch.SketchGen} scope stack.
 * @class Sketch.SketchGen.ScopeStackFrame
 * @public
 * @author FelixMcFelix (Kyle S.)
 */
Sketch.SketchGen.ScopeStackFrame = function(){
	this.labelTable = {};
	this.nextData = 0;
};

/**
 * @classdesc Simple semantic class for use in the {@link Sketch.SketchGen.ScopeStackFrame} label table.
 * @class Sketch.SketchGen.Label
 * @public
 * @param {Number} addr - the address the label references within its data frame.
 * @param {String} type - the type of the variable represented by the label.
 * @param {Object} [extra] - any extra data (function parameters etc.) that must be known about the label.
 * @author FelixMcFelix (Kyle S.)
 */
Sketch.SketchGen.Label = function(addr, type, extra){
	this.address = addr;
	this.type = type;
	if(extra){
		this.extra = extra;
	}
};
/* global Sketch */
Sketch.sketchGenDefaultReturns = {
	void: null,
	num: 0,
	bool: false,
	point: [0,0],
	line: [0,0,0,0],
	polygon: [0,0,0,0,0,0]
};
/* global Sketch */
/**
 * @classdesc A base class to construct enumerations, without coupling the label to the constant it represents.
 * @class Sketch.EnumBase
 * @public
 * @author FelixMcFelix (Kyle S.)
 */

Sketch.EnumBase = function(){
	var _count = 0;
	/**
	 * Array matching numbers to their original names. Not to be used unless reverse lookup is specifically required.
	 * @name Sketch.EnumBase._rev
	 * @type {string[]}
	 * @protected
	 */
	this._rev = [];

	/**
	 * Add a new property to the enum.
	 * @method Sketch.EnumBase#propAdd
	 * @returns void
	 * @public
	 */
	this.propAdd = function(name){
		this._rev[_count] = name;
		this[name] = _count++;
	};
};

/**
 * Enum for all supported nodes within the code generator.
 * @readonly
 * @enum {number}
 */

/*
Sketch.SketchGenNodes.propAdd("template");
*/

Sketch.SketchGenNodes = new Sketch.EnumBase();

//Program header.
Sketch.SketchGenNodes.propAdd("program");

//Program Structure
Sketch.SketchGenNodes.propAdd("block");
Sketch.SketchGenNodes.propAdd("function");
Sketch.SketchGenNodes.propAdd("func_call");
Sketch.SketchGenNodes.propAdd("return");

Sketch.SketchGenNodes.propAdd("if");
Sketch.SketchGenNodes.propAdd("else");
Sketch.SketchGenNodes.propAdd("else_if");

//Variable declaration and assignment
Sketch.SketchGenNodes.propAdd("variable_decl");
Sketch.SketchGenNodes.propAdd("variable_decl_assign");
Sketch.SketchGenNodes.propAdd("decl");
Sketch.SketchGenNodes.propAdd("assign");

//Arithmetic instructions
Sketch.SketchGenNodes.propAdd("addition");
Sketch.SketchGenNodes.propAdd("subtraction");
Sketch.SketchGenNodes.propAdd("multiplication");
Sketch.SketchGenNodes.propAdd("division");
Sketch.SketchGenNodes.propAdd("modulo");

Sketch.SketchGenNodes.propAdd("unary_minus");

Sketch.SketchGenNodes.propAdd("increment");
Sketch.SketchGenNodes.propAdd("decrement");

//Arithmetic assignment instructions.
Sketch.SketchGenNodes.propAdd("add_assign");
Sketch.SketchGenNodes.propAdd("sub_assign");
Sketch.SketchGenNodes.propAdd("mul_assign");
Sketch.SketchGenNodes.propAdd("div_assign");
Sketch.SketchGenNodes.propAdd("mod_assign");

//Graphical operands
Sketch.SketchGenNodes.propAdd("colour");
Sketch.SketchGenNodes.propAdd("translate");

//Logical Instructions
Sketch.SketchGenNodes.propAdd("and");
Sketch.SketchGenNodes.propAdd("or");
Sketch.SketchGenNodes.propAdd("equal");
Sketch.SketchGenNodes.propAdd("not_equal");
Sketch.SketchGenNodes.propAdd("negate");

Sketch.SketchGenNodes.propAdd("less_than");
Sketch.SketchGenNodes.propAdd("greater_than");
Sketch.SketchGenNodes.propAdd("less_than_or_equal");
Sketch.SketchGenNodes.propAdd("greater_than_or_equal");

//Literals and identifiers.
Sketch.SketchGenNodes.propAdd("num");
Sketch.SketchGenNodes.propAdd("ident");
Sketch.SketchGenNodes.propAdd("bool");
Sketch.SketchGenNodes.propAdd("point");

Sketch.SketchGenNodes.propAdd("width");
Sketch.SketchGenNodes.propAdd("height");

//Render instructions.
Sketch.SketchGenNodes.propAdd("draw");
Sketch.SketchGenNodes.propAdd("clear");
Sketch.SketchGenNodes.propAdd("clear_colour");
/* global Sketch */
/* global MVM */

//HELPERS
var createNode = function(type, args){
	return {
		type: Sketch.SketchGenNodes[type],
		arguments: args
	};
};

var boolNegateNode = function(node){
	return createNode("negate", node);
};

var resolveType = function(typeObj){
	if(typeObj.type === "ident"){
		typeObj = typeObj.data.entry
	}

	return typeObj
};

var loadAndOperate = function(context, nodes, operand){
	var types = [];
	for(var i = 0; i< nodes.length; i++){
		var n = context.interpretNode(nodes[i]);

		// if(n.type === "ident"){
		// 	types.push(n.data.entry);
		// } else{
		// 	types.push(n);
		// }
		types.push(resolveType(n));
	}

	var o = Sketch.SketchGenOperandTable.lookup(operand, types);

	context.emit(o.value.code);

	var d = o.value;
	if(o.extra){
		d.extra = o.extra;
	}

	return d;
};

var primitive = function(context, value, type){
	context.emit(MVM.opCodes.LOADC);
	context.emit(value);
	return {type: type};
};

var assignmentOperand = function(context, nodes, operandNode){
	context.interpretNode(createNode("assign", [nodes[0], createNode(operandNode, [nodes[0], nodes[1]])]));
};

var increment = function(context, nodes, value){
	context.interpretNode(nodes[0]);
	assignmentOperand(context, [nodes[0], createNode("num", value)], "addition");

	return Sketch.SketchGenOperandTable.lookup((value>0)?"++":"--", [Sketch.SketchGenNodes._rev[nodes[0]]]).value;
};

/**
 * Table of unbound functions used in code generation.
 * These correspond to keys in {@link Sketch.SketchGenNodes}, and MUST be bound to an instance of {@link Sketch.SketchGen} to function.
 * @constant Sketch.SketchGen.SketchGenInstr
 * @author FelixMcFelix (Kyle S.)
 */
Sketch.SketchGenInstr = [];
Sketch.addInstruction = function(key, func){
	Sketch.SketchGenInstr[Sketch.SketchGenNodes[key]] = func;
};

//CONVENTION: All functions return an object with their return type. This is how we do type checking.

/*
Sketch.addInstruction("template", function(args){
	var type;
	return type;
});
*/

//Program header.
Sketch.addInstruction("program", function(args){
	this.interpretNode(args);
	this.emit(MVM.opCodes.EXIT);
});

//Program Structure
Sketch.addInstruction("block", function(args, noCodes){
	//HAS NO TYPE - ORGANISATIONAL TYPE

	this.scopePush(noCodes);
	this.interpretNode(args);
	this.scopePop(noCodes);

	return {type: null}
});

Sketch.addInstruction("function", function(args){
	//args[0] = name, args[1] = decls[], args[2] = type, args[3] = block
	//We need to extract info, and then transform the tree to place decls inside the block.

	this.beginFunction(args[2]);

	this.emit(MVM.opCodes.JUMP);
	var patchme = this.emit(0xff);

	//Extract the amount of parameters and their types - names are unimportant for the table.
	var pTypes = [];
	args[1].forEach(function(curr){
		pTypes.push(curr.arguments[0]);
	});

	this.scopeRegister(args[0], "function", {returnType: args[2], paramTypes: pTypes});

	this.interpretNode(createNode("block", [args[1], args[3].arguments]), true);

	//All functions return a null value for their type automatically.
	//This allows runoff at the end, implicit zero return,
	//and makes my life easier.

	var defaultRet = Sketch.sketchGenDefaultReturns[args[2]];

	if(defaultRet === null){
		this.emit(MVM.opCodes.RETURN);
	} else{
		this.interpretNode(createNode(args[2], defaultRet));
		this.emit(MVM.opCodes.RETURNVAL);
	}
	
	this.patch(patchme, this.pc());

	this.endFunction();

	return {type: "function"};
});

Sketch.addInstruction("func_call", function(args){
	//args[0] = name, args[1] = params[]
	//Lookup name, check for function type.
	//Compare param types, count while accessing them.
	//Check return type against 

	var dat = this.scopeLookup(args[0]);

	if(dat.entry.type !== "function"){
		throw "Tried to call "+args[0]+" as though it were a function - it is a "+dat.type+"!";
	}
	if(args[1].length === undefined){
		args[1].length = 0;
	}
	if(dat.entry.extra.paramTypes.length !== args[1].length){
		throw "Parameter length mismatch.";
	}

	for(var i = 0; i<args[1].length; i++){
		var t1 = resolveType(this.interpretNode(args[1][i])).type;
		var t2 = dat.entry.extra.paramTypes[i];

		if (t1 !== t2){
			throw "Type mismatch on parameter "+i+" of call to "+args[0]+": EXPECTED "+t2+", not"+t1+".";
		}
	}

	this.emit(MVM.opCodes.CALL);
	this.emit(dat.stack);
	this.emit(dat.entry.address);
	this.emit(args[1].length);

	return {type: dat.entry.extra.returnType};
});

Sketch.addInstruction("return", function(args){
	if(args === null){
		this.emit(MVM.opCodes.RETURN);
	} else{
		var t1 = resolveType(this.interpretNode(args)).type;
		this.emit(MVM.opCodes.RETURNVAL);

		var t2 = this.currentFunctionType();
		if (t1 !== t2){
			throw "ERROR: expected return type of "+t2+", given "+t1+".";
		}
	}

	return {type: null};
});

Sketch.addInstruction("if", function(args){
	//args is an array of the other classes.
	//each returns an object with property "patch", the address to patch with the end 
	var patches = [];
	var t = this;

	args.forEach(function(c){
		var k = t.interpretNode(c);
		patches.push(k.patch);
	});

	var end = this.pc();

	patches.forEach(function(c){
		if(c !== null){
			t.patch(c, end);
		}
	});

	return {type: null};
});

Sketch.addInstruction("else_if", function(args){
	//args[0] is the expression to test.
	//args[1] is the block.
	var t1 = this.interpretNode(args[0]);
	if(resolveType(t1).type !== "bool"){
		throw "Expressions in an if-else block must be boolean type (true or false).";
	}
	this.emit(MVM.opCodes.JUMPF);
	var patch1 = this.emit(0xFF);

	var t2 = this.interpretNode(args[1]);
	this.emit(MVM.opCodes.JUMP);
	t2.patch = this.emit(0xFF);

	this.patch(patch1, this.pc());

	return t2;
});

Sketch.addInstruction("else", function(args){
	//args should just be a block;
	var d = this.interpretNode(args);
	d.patch = null;
	return d;
});

//Variable declaration and assignment
Sketch.addInstruction("variable_decl", function(args){
	this.interpretNode(args);
});

Sketch.addInstruction("variable_decl_assign", function(args){
	this.interpretNode(args[0]);

	this.interpretNode(createNode("assign", [createNode("ident", args[0].arguments[1]), args[1]]));
});

Sketch.addInstruction("decl", function(args){
	this.scopeRegister(args[1],args[0]);
	return args[0];
});

Sketch.addInstruction("assign", function(args){
	var left = this.interpretNode(args[0], true);
	var right = this.interpretNode(args[1]);

	if(left.type !== "ident"){
		throw "ERROR: non-identity type on left side of assignment operator.";
	}
	if(resolveType(right).type !== resolveType(left).type){
		console.log("Ltype: "+resolveType(left).type+", Rtype: "+resolveType(right).type);
		throw "ERROR: right side of assignment does not match type of identifier.";
	}

	if(right.extra){
		left.data.entry.extra = right.extra;
	}

	this.emit(MVM.opCodes.STORER);
	this.emit(left.data.stack);
	this.emit(left.data.entry.address);

	return right;
});

//Arithmetic Instructions
Sketch.addInstruction("addition", function(args){
	return loadAndOperate(this, args, "+");
});

Sketch.addInstruction("subtraction", function(args){
	return loadAndOperate(this, args, "-");
});

Sketch.addInstruction("multiplication", function(args){
	return loadAndOperate(this, args, "*");
});

Sketch.addInstruction("division", function(args){
	return loadAndOperate(this, args, "/");
});

Sketch.addInstruction("modulo", function(args){
	return loadAndOperate(this, args, "%");
});

Sketch.addInstruction("increment", function(args){
	return increment(this, args, 1);
});

Sketch.addInstruction("decrement", function(args){
	return increment(this, args, -1);
});

Sketch.addInstruction("unary_minus", function(args){
	return this.interpretNode(createNode("multiplication", [args, createNode("num", [-1])]));
});

//Arithmetic assignment Instructions.
Sketch.addInstruction("add_assign", function(args){
	return assignmentOperand(this, args, "addition");
});

Sketch.addInstruction("sub_assign", function(args){
	return assignmentOperand(this, args, "subtraction");
});

Sketch.addInstruction("mul_assign", function(args){
	return assignmentOperand(this, args, "multiplication");
});

Sketch.addInstruction("div_assign", function(args){
	return assignmentOperand(this, args, "division");
});

Sketch.addInstruction("mod_assign", function(args){
	return assignmentOperand(this, args, "modulo");
});

//Graphical operands
Sketch.addInstruction("colour", function(args){
	return loadAndOperate(this, args, "~");
});

Sketch.addInstruction("translate", function(args){
	return loadAndOperate(this, args, "->");
});

//Logical Instructions
Sketch.addInstruction("and", function(args){
	return loadAndOperate(this, args, "&&");
});

Sketch.addInstruction("or", function(args){
	return loadAndOperate(this, args, "||");
});

Sketch.addInstruction("equal", function(args){
	return loadAndOperate(this, args, "?=");
});

Sketch.addInstruction("not_equal", function(args){
	return this.interpretNode(boolNegateNode(createNode("equal", args)));
});

Sketch.addInstruction("negate", function(args){
	return loadAndOperate(this, [args], "!");
});



Sketch.addInstruction("less_than", function(args){
	return loadAndOperate(this, args, "?<");
});

Sketch.addInstruction("greater_than", function(args){
	return loadAndOperate(this, args, "?>");
});

Sketch.addInstruction("less_than_or_equal", function(args){
	return this.interpretNode(boolNegateNode(createNode("greater_than", args)));
});

Sketch.addInstruction("greater_than_or_equal", function(args){
	return this.interpretNode(boolNegateNode(createNode("less_than", args)));
});

//Literals and identifiers.
Sketch.addInstruction("num", function(args){
	return primitive(this, args, "num");
});

Sketch.addInstruction("ident", function(args, noaccess){
	var d = this.scopeLookup(args);
	if(!noaccess){
		this.emit(MVM.opCodes.LOADR);
		this.emit(d.stack);
		this.emit(d.entry.address);
	}
	return {type: "ident", data: d};
});

Sketch.addInstruction("bool", function(args){
	return primitive(this, args, "bool");
});

Sketch.addInstruction("point", function(args){
	var size = args.length;
	
	if(size){
		//Okay, all elements must be num.
		args.forEach(function(curr){
			var t = this.interpretNode(curr);
			if(t.type !== "num" && t.data.entry.type !== "num"){
				throw "Tried to place a non-numeric value into a point type.";
			}
		}.bind(this));
	
		this.emit(MVM.opCodes.AGGR);
		this.emit(size);
	} else{
		throw "Can't define a zero-size point!";
	}

	return {type: "point", extra: {size: size}};
});

Sketch.addInstruction("width", function(){
	this.emit(MVM.opCodes.WIDTH);
	return {type: "num"};
});

Sketch.addInstruction("height", function(){
	this.emit(MVM.opCodes.HEIGHT);
	return {type: "num"};
});

//Render instructions.
Sketch.addInstruction("draw", function(args){
	return loadAndOperate(this, [args], "draw");
});

Sketch.addInstruction("clear", function(){
	primitive(this, null, null);
	this.emit(MVM.opCodes.CLEAR);
	return {type: null};
});

Sketch.addInstruction("clear_colour", function(args){
	return loadAndOperate(this, [args], "clear");
});

Sketch.bindInstructions = function(sketchgen){
	var out = [];
	for (var i = 0; i < Sketch.SketchGenInstr.length; i++){
		out[i] = Sketch.SketchGenInstr[i].bind(sketchgen);
	}
	return out;
};
/* global Sketch */
/* global MVM */
//Class definitions for the lookup table.

Sketch.MultiKeyTable = function(){
	this.store = {};
};

Sketch.MultiKeyTable.prototype = {
	add: function(operand, keys, value, predicate, extraSelector){
		var entry = new Sketch.MultiKeyTableEntry(this, operand, keys, value);

		if(!this.store[operand]){
			this.store[operand] = {};
		}

		var cursor = this.store[operand];

		for(var i = 0; i<keys.length; i++){
			if(!cursor[keys[i]]){
				cursor[keys[i]] = {};
			}

			cursor = cursor[keys[i]];
		}

		cursor.content = entry;
		cursor.predicate = predicate;
		cursor.extraSelector = extraSelector;

		return entry;
	},

	lookup: function(operand, keys){
		try{
			var k = this.store[operand];

			for(var i = 0; i< keys.length; i++){
				k = k[keys[i].type];
			}

			var out;

			if (k.content && k.predicate){
				var pred = k.predicate(keys);
				if(pred.answer){
					out = k.content;
				} else{
					throw pred.reason;
				}
			} else if (k.content) {
				out = k.content;
			} else{
				throw "No associated entry...";
			}

			if(k.extraSelector){
				out.extra = k.extraSelector(keys);
			}

			return out;
		} catch(e){
			var keysStr = "";
			keys.forEach(function(curr, ind, arr){keysStr+=curr.type; if(ind!==arr.length-1){keysStr+=", ";}});

			throw "Operand and key combination not found for: "+operand+" and "+keysStr+": \n"+e;
		}
	}
};

Sketch.MultiKeyTableEntry = function(table, operand, keys, value){
	this.parent = table;
	this.operand = operand;
	this.keys = keys;
	this.value = value;
};

Sketch.MultiKeyTableEntry.prototype = {
	reflexive: function(){
		this.parent.add(this.operand, this.keys.reverse(), this.value);
	}
};

Sketch.OpCheckValue = function(type, code){
	this.type = type;
	this.code = code;
};

Sketch.SketchGenOperandTable = new Sketch.MultiKeyTable();

/* TEMPLATE
Sketch.SketchGenOperandTable.add("+", ["num", "num"],
							  new Sketch.OpCheckValue("num", MVM.opCodes.FADD)
							)
							.reflexive();

Sketch.SketchGenOperandTable.add("+", ["num", "num"], new Sketch.OpCheckValue("num", MVM.opCodes.FADD))
							.reflexive();
*/

//OUR TYPES ARE num, bool, point, line, polygon, void.

//---//
// + //
//---//
Sketch.SketchGenOperandTable.add("+", ["num", "num"],
							  new Sketch.OpCheckValue("num", MVM.opCodes.FADD)
							);

var pointPointChecker = function(keys){
	var out;
	if(keys[0].extra.size>2){
		out = {answer: false, reason: "Shapes over 2D are not yet supported."};
	} else{
		out = {
	  		answer: keys[0].extra.size === keys[1].extra.size,
	  		reason: "Mismatch between point sizes at addition: "+keys[0].extra.size+" !== "+keys[1].extra.size
	  	};
	}

	return out;
};

var extraOfSecond = function(keys){
	return keys[1].extra;
};

Sketch.SketchGenOperandTable.add("+", ["point", "point"],
							  new Sketch.OpCheckValue("line", MVM.opCodes.PTADD),
							  pointPointChecker,
							  extraOfSecond
							);

//TODO: add opcode.
Sketch.SketchGenOperandTable.add("+", ["point", "line"],
							  new Sketch.OpCheckValue("polygon", MVM.opCodes.AUGPT)
							)
							.reflexive();

//TODO: add opcode.
Sketch.SketchGenOperandTable.add("+", ["point", "polygon"],
							  new Sketch.OpCheckValue("polygon", MVM.opCodes.AUGPT)
							)
							.reflexive();

//---//
// - //
//---//
Sketch.SketchGenOperandTable.add("-", ["num", "num"],
							  new Sketch.OpCheckValue("num", MVM.opCodes.FSUB)
							);

//---//
// * //
//---//
Sketch.SketchGenOperandTable.add("*", ["num", "num"],
							  new Sketch.OpCheckValue("num", MVM.opCodes.FMUL)
							);

//---//
// / //
//---//
Sketch.SketchGenOperandTable.add("/", ["num", "num"],
							  new Sketch.OpCheckValue("num", MVM.opCodes.FDIV)
							);

//---//
// % //
//---//
Sketch.SketchGenOperandTable.add("%", ["num", "num"],
							  new Sketch.OpCheckValue("num", MVM.opCodes.FMOD)
							);

//----//
// ++ //
//----//
Sketch.SketchGenOperandTable.add("++", ["ident"],
							  new Sketch.OpCheckValue("num", null)
							);

//----//
// -- //
//----//
Sketch.SketchGenOperandTable.add("--", ["ident"],
							  new Sketch.OpCheckValue("num", null)
							);

//----//
// && //
//----//
Sketch.SketchGenOperandTable.add("&&", ["bool", "bool"],
							  new Sketch.OpCheckValue("bool", MVM.opCodes.BAND)
							);

//----//
// || //
//----//
Sketch.SketchGenOperandTable.add("||", ["bool", "bool"],
							  new Sketch.OpCheckValue("bool", MVM.opCodes.BOR)
							);


//----//
// ?= //
//----//
Sketch.SketchGenOperandTable.add("?=", ["bool", "bool"],
							  new Sketch.OpCheckValue("bool", MVM.opCodes.CMPEQ)
							);
Sketch.SketchGenOperandTable.add("?=", ["num", "num"],
							  new Sketch.OpCheckValue("bool", MVM.opCodes.CMPEQ)
							);
Sketch.SketchGenOperandTable.add("?=", ["point", "point"],
							  new Sketch.OpCheckValue("bool", MVM.opCodes.CMPEQ)
							);
Sketch.SketchGenOperandTable.add("?=", ["line", "line"],
							  new Sketch.OpCheckValue("bool", MVM.opCodes.CMPEQ)
							);
Sketch.SketchGenOperandTable.add("?=", ["polygon", "polygon"],
							  new Sketch.OpCheckValue("bool", MVM.opCodes.CMPEQ)
							);

//----//
// ?< //
//----//
Sketch.SketchGenOperandTable.add("?<", ["num", "num"],
							  new Sketch.OpCheckValue("bool", MVM.opCodes.CMPLT)
							);

//----//
// ?> //
//----//
Sketch.SketchGenOperandTable.add("?>", ["num", "num"],
							  new Sketch.OpCheckValue("bool", MVM.opCodes.CMPGT)
							);

//---//
// ! //
//---//
Sketch.SketchGenOperandTable.add("!", ["bool"],
							  new Sketch.OpCheckValue("bool", MVM.opCodes.BNEG)
							);

//------//
// draw //
//------//
Sketch.SketchGenOperandTable.add("draw", ["line"],
							  new Sketch.OpCheckValue(null, MVM.opCodes.LNDRAW)
							);

Sketch.SketchGenOperandTable.add("draw", ["polygon"],
							  new Sketch.OpCheckValue(null, MVM.opCodes.PGDRAW)
							);

//---//
// ~ //
//---//
var colourSizeCheck = function(keys){
	var target = keys[keys.length - 1];
	return {
		answer: (target.extra === undefined) || (target.extra.size === 3) || (target.extra.size === 4) , //Assume the user knows what the hell they're doing if they pass a colour to a function.
		reason: "Size of a colour must be 3 or 4 numbers." 
	};
}

Sketch.SketchGenOperandTable.add("~", ["line", "point"],
							  new Sketch.OpCheckValue("line", MVM.opCodes.SETCOLOUR),
							  colourSizeCheck
							);
Sketch.SketchGenOperandTable.add("~", ["polygon", "point"],
							  new Sketch.OpCheckValue("polygon", MVM.opCodes.SETCOLOUR),
							  colourSizeCheck
							);

//----//
// -> //
//----//
var pointIs2d = function(keys){
	return {
		answer: (keys[1].extra === undefined) || (keys[1].extra.size === 2),
		reason: "Shapes over 2D are not yet supported."
	};
};

Sketch.SketchGenOperandTable.add("->", ["point", "point"],
							  new Sketch.OpCheckValue("point", MVM.opCodes.TRANSLATEPT),
							  pointPointChecker,
							  extraOfSecond
							);
Sketch.SketchGenOperandTable.add("->", ["line", "point"],
							  new Sketch.OpCheckValue("line", MVM.opCodes.TRANSLATESTRUCT),
							  pointIs2d
							);
Sketch.SketchGenOperandTable.add("->", ["polygon", "point"],
							  new Sketch.OpCheckValue("polygon", MVM.opCodes.TRANSLATESTRUCT),
							  pointIs2d
							);

//-------//
// clear //
//-------//
Sketch.SketchGenOperandTable.add("clear", ["point"],
							  new Sketch.OpCheckValue(null, MVM.opCodes.CLEAR),
							  colourSizeCheck
							);
;
// end

/* global WebGLRenderingContext */
/* global WebGLProgram */
/* global WebGLShader */
/**
* @namespace Palette
*/
var Palette = Palette || {};
/* global Palette */

/* global Palette */
/* global WebGLRenderingContext */
/**
* @classdesc The core part of the system - initialise this to begin using the shader manager.
* @class Palette.Manager
* @param {WebGLRenderingContext} gl - The context all shaders and programs will belong to and be compiled by.
* @author FelixMcFelix (Kyle S.)
*/
Palette.Manager = function(gl){
	/**
    * A reference to the defining WebGLRenderingContext.
    * @name Palette.Manager#context
	* @type WebGLRenderingContext
    * @protected
    * @readonly
    */
	this.context 		= gl;
	
	/**
    * An object storing all processed Vertex Shaders.
    * @name Palette.Manager#vertShaders
	* @type Object
    * @protected
    */
	this.vertShaders 	= {};
	/**
    * An object storing all processed Fragment Shaders.
    * @name Palette.Manager#fragShaders
	* @type Object
    * @protected
    */
	this.fragShaders	= {};
	/**
    * An object storing all processed Programs.
    * @name Palette.Manager#programs
	* @type Object
    * @protected
    */
	this.programs		= {};

	/**
    * A {@link Palette.ShaderFactory} object utilised by the manager
    * to generate valid shader objects from many sources for use.
    * @name Palette.Manager#shaderFactory
	* @type Palette.ShaderFactory
    * @protected
    * @readonly
    */
	this.shaderFactory	= new Palette.ShaderFactory(this);
};

Palette.Manager.prototype = {
	/**
	* Add a shader into the manager's storage for future access.
	* @method Palette.Manager#addShader
	* @public
	* @param {string|Palette.Shader} shaderRef - URL, JSON or Palette.Shader.
	*/
	addShader: function(shaderRef){
		this.shaderFactory.addShader(shaderRef);
	},

	/**
	* Send a draw call to a given vs-fs pair.
	* The work is delegated down to the program's own draw method.
	* @method Palette.Manager#draw
	* @public
	* @param {string|Palette.Shader} vs - The desired Vertex Shader.
	* @param {string|Palette.Shader} fs - The desired Fragment Shader.
	* @param {Float32Array} verts - Vertex list to pass to the GPU.
	* @param {object} [conf1] - A set of attributes to pass down to the fragment shader.
	* @param {object} [conf2] - A set of attributes to pass down to the vertex shader.
	*/
	draw: function(vs, fs, verts, conf1, conf2){
		this.getProgram(vs, fs).draw(verts, conf1, conf2);
	},

	/**
	* Request a program object from a known vs-fs pair.
	* @method Palette.Manager#getProgram
	* @public
	* @param {string|Palette.Shader} vs - The desired Vertex Shader.
	* @param {string|Palette.Shader} fs - The desired Fragment Shader.
	* @return {Palette.Program} The {@link Palette.Program} either found or generated. If either shader was not found, NULL is returned.
	*/
	getProgram: function(vs, fs){
		var vsName = this.getShaderName(vs);
		var fsName = this.getShaderName(fs);
		var vsObj;
		var fsObj;

		var output;

		this.programs[vsName] = this.programs[vsName] || {};
		this.programs[vsName][fsName] = this.programs[vsName][fsName] || {};

		if(!(this.programs[vsName][fsName] instanceof Palette.Program)){
			if(vs instanceof Palette.Shader){vsObj = vs;} else{vsObj = this.getShader(Palette.Shader.VS, vsName);}
			if(fs instanceof Palette.Shader){fsObj = fs;} else{fsObj = this.getShader(Palette.Shader.FS, fsName);}
			this.programs[vsName][fsName] = new Palette.Program(this.context, vsObj, fsObj);
		}
		output = this.programs[vsName][fsName];

		return output;
	},

	/**
	* Request a shader object from storage using its type and name.
	* @method Palette.Manager#getShader
	* @public
	* @param {int} type - Either Palette.Shader.VS or Palette.Shader.FS.
	* @param {string} name - The shader's identifier.
	* @return {Palette.Shader} The requested {@link Palette.Shader}. If a shader was not found, NULL is returned.
	*/
	getShader: function(type, name){
		return (type === Palette.Shader.VS) ? this.vertShaders[name] : this.fragShaders[name];
	},

	/**
	* Ensure that we have a shader's name, for lookup purposes in particular.
	* @method Palette.Manager#getShaderName
	* @public
	* @param {string|Palette.Shader} input - The shader we need to sanity check the name of.
	* @return {string} - The definite name of the shader.
	*/
	getShaderName: function(input){
		var output;
		if(input instanceof Palette.Shader){
			output = input.name;
		} else{
			output = input;
		}
		return output;
	}
};

Palette.Manager.prototype.constructor = Palette.Manager;

/**
* @classdesc Abstraction of program references to allow easy manipulation.
* @description The Program object, generated from linked pairs of vs-fs combinations.
* @class Palette.Program
* @param {WebGLRenderingContext} gl - The context the shaders of this program will belong to and be compiled by.
* @param {Palette.Shader} vs - The {@link Palette.Shader} acting as the vertex shader for this program.
* @param {Palette.Shader} fs - The {@link Palette.Shader} acting as the fragment shader for this program.
* @author FelixMcFelix (Kyle S.)
*/
Palette.Program = function(gl, vs, fs){
	/**
	* The program's attached context.
	* @name Palette.Program#context
	* @type WebGLRenderingContext
	* @protected
	* @readonly
	*/
	this.context = gl;
	
	/**
	* The program's attached vertex shader.
	* @name Palette.Program#vs
	* @type Palette.Shader
	* @protected
	* @readonly
	*/
	this.vs = vs;
	
	/**
	* The program's attached fragment shader.
	* @name Palette.Program#fs
	* @type Palette.Shader
	* @protected
	* @readonly
	*/
	this.fs = fs;

	/**
	* The program as seen by WebGL.
	* @name Palette.Program#program
	* @type WebGLProgram
	* @protected
	* @readonly
	*/
	this.program = null;

	/**
	* Has the program attempted compilation yet?
	* @name Palette.Program#compiled
	* @type Boolean
	* @private
	* @readonly
	*/
	this.compiled = false;

	/**
	* Attribute Storage - temporary and set.
	* @name Palette.Program#attrs
	* @type Object
	* @private
	* @readonly
	*/
	this.attrs = {vs: {access:{},store:{},send:{}},
					fs: {access:{},store:{},send:{}}};

	/**
	* The Selected Draw Mode for the program.
	* @name Palette.Program#drawMode
	* @type int
	* @private
	* @readonly
	*/
	this.drawMode = Palette.Program.TRIANGLES;

	this.linkProgram();
	this.prepareAttrStores();
};

Palette.Program.prototype = {
	/**
	* Draw a set of vertices with this program, with optional configuration. Configurations passed here do not
	* overwrite the cached object.
	* This method is accessed when {@link Palette.Manager#draw} is called.
	* @method Palette.Program#draw
	* @public
	* @param {Float32Array} verts - Vertex list to pass to the GPU.
	* @param {object} [conf1] - A set of attributes to pass down to the fragment shader.
	* @param {object} [conf2] - A set of attributes to pass down to the vertex shader.
	*/
	draw: function(verts, conf1, conf2){
		this.context.useProgram(this.program);
		if(!conf1) conf1 = {};
		var tempDrawMode = this.drawMode;
		if(verts !== null){
		switch(this.drawMode){
			case Palette.Program.POLYGON:
				var temp = earcut(verts, null, 2);
				var itemSize = this.attrs.vs.access.vertexBuffer.itemSize;
				var temper = new Float32Array(temp.length * itemSize);

				var vertSize = 2;

				for(var i=0; i<temp.length; i++){
					var vertIndex = temp[i];

					switch(vertSize){
						case 3:
							temper[itemSize*i+2] = verts[vertIndex*vertSize +2];
							/*falls through*/
						case 2:
							temper[itemSize*i+1] = verts[vertIndex*vertSize +1];
							/*falls through*/
						case 1:
							temper[itemSize*i] = verts[vertIndex*vertSize];
							/*falls through*/
					}
				}
				conf1.vertexBuffer = temper;
				tempDrawMode = Palette.Program.TRIANGLES;
				break;
			default:
				conf1.vertexBuffer = verts;
				break;
		}
		}

		this.generateSend(this.attrs.vs, conf1);
		this.generateSend(this.attrs.fs, conf2);

		this.passAttrstoProg();

		this.context.drawArrays(tempDrawMode, 0,
			this.attrs.vs.send.vertexBuffer.length/this.attrs.vs.access.vertexBuffer.itemSize);
	},

	/**
	* Restore a program's object config for either shader or both.
	* @method Palette.Program#restoreDefaultConfig
	* @public
	* @param {int} mode - The identifier for which config object to revert. Supports Palette.Program.VS_MODE,
	* Palette.Program.FS_MODE, Palette.Program.BOTH_MODE.
	*/
	restoreDefaultConfig: function(mode){
		var attrPointer;
		var shaderPointer;

		for(var j=0; j<2; j++){
			if(!j){if(!mode&Palette.Program.VS_MODE)continue; shaderPointer = this.vs; attrPointer = this.attrs.vs;}
			else {if(!mode&Palette.Program.FS_MODE)continue; shaderPointer = this.fs; attrPointer = this.attrs.fs;}

			for (var i = shaderPointer.attrs.length - 1; i >= 0; i--) {
				var attrData = shaderPointer.attrs[i];
				var name = attrData[0];

				if(attrData[1]=="buffer" || attrData[1]=="vertexAttrib"){
					attrPointer.store[name] = null;
				} else if(attrData[1]!="vertexAttrib"){
					attrPointer.store[name] = attrData[2];
				}
			}
		}
	},

	/**
	* Set a program's object config for either shader or both with a given config object.
	* Object properties not in the supplied object will not overwrite the program state.
	* @method Palette.Program#setConfig
	* @public
	* @param {int} mode - The identifier for which config object to set. Supports Palette.Program.VS_MODE,
	* Palette.Program.FS_MODE, Palette.Program.BOTH_MODE.
	* @param {object} conf - The config object to inject into the program state.
	*/
	setConfig: function(mode, conf){
		var attrPointer;
		var shaderPointer;

		for(var j=0; j<2; j++){
			if(!j){if(!mode&Palette.Program.VS_MODE)continue; shaderPointer = this.vs; attrPointer = this.attrs.vs;}
			else {if(!mode&Palette.Program.FS_MODE)continue; shaderPointer = this.fs; attrPointer = this.attrs.fs;}

			for(var prop in attrPointer.access){
				var attrDest = attrPointer.store[prop];

				if(conf[prop]!== undefined)
					attrDest = conf[prop];
			}
		}
	},

	/**
	* Compile the set of shader attached to this program as a compilation unit.
	* Can only be run once per Program object, i.e. per vs-fs pair.
	* @method Palette.Program#linkProgram
	* @private
	*/
	linkProgram: function(){
		if (this.compiled) return false;
		this.compiled = true;

		this.program = this.context.createProgram();

		this.context.attachShader(this.program, this.vs.shader);
		this.context.attachShader(this.program, this.fs.shader);

		this.context.linkProgram(this.program);

		return true;
	},

	/**
	* Fetches the default values for program attributes, and fetches setter methods
	* for execution at run time. 
	* @method Palette.Program#prepareAttrStores
	* @private
	*/
	prepareAttrStores: function(){
		this.context.useProgram(this.program);
		var shaderPointer;
		var attrPointer;

		for(var j=0; j<2; j++){
			if(!j){shaderPointer = this.vs; attrPointer = this.attrs.vs;}
			else {shaderPointer = this.fs; attrPointer = this.attrs.fs;}

			for (var i = shaderPointer.attrs.length - 1; i >= 0; i--) {
				var attrData = shaderPointer.attrs[i];
				var name = attrData[0];
				attrPointer.access[name] = attrPointer.access[name] || {};
				var attrAccessDest = attrPointer.access[name];

				attrAccessDest.setFunction = Palette.Program.fetchSetter(this.context, attrData[1]);

				if(attrData[1]=="vertexAttrib"){
					attrAccessDest.pointer = this.context.getAttribLocation(this.program, attrData[0]);
					this.context.enableVertexAttribArray(attrAccessDest.pointer);
					attrAccessDest.bufferName = attrData[2];
				}	else if(attrData[1]=="buffer"){
					attrAccessDest.pointer = this.context.createBuffer();
					attrAccessDest.itemSize = attrData[2];
				}	else{
					attrAccessDest.pointer = this.context.getUniformLocation(this.program, attrData[0]);
				}

				attrAccessDest.type = attrData[1];
			}
		}
		this.restoreDefaultConfig(Palette.Program.BOTH_MODE);
	},

	/**
	* Run through the setters for each attribute, passing the values in the send
	* section of the store to the context.
	* @method Palette.Program#passAttrsToProg
	* @private
	*/
	passAttrstoProg: function(){
		var attrPointer;

		for(var j=0; j<2; j++){
			if(!j){attrPointer = this.attrs.vs;}
			else {attrPointer = this.attrs.fs;}

			for(var prop in attrPointer.access){
				var attrDest = attrPointer.send[prop];
				var attrAccessDest = attrPointer.access[prop];

				if(attrAccessDest.type.substr(0,3) == "mat"){
					attrAccessDest.setFunction(attrAccessDest.pointer, this.context.FALSE, attrDest);
				} else if(attrAccessDest.type == "vertexAttrib"){
					var buffer = this.attrs.vs.access[attrAccessDest.bufferName];
					attrAccessDest.setFunction(attrAccessDest, buffer);
				} else if(attrAccessDest.type == "buffer"){
					attrAccessDest.setFunction(attrAccessDest, attrDest);
				} else{
					attrAccessDest.setFunction(attrAccessDest.pointer, attrDest);
				}
			}
		}
	},

	/**
	* Set a program's draw mode.
	* @method Palette.Program#setDrawMode
	* @public
	* @param {int} mode - The gl code for drawing mode. Supports Palette.Program.POINTS, .LINES, .LINE_LOOP,
	* .LINE_STRIP, .TRIANGLES, .TRIANGLE_STRIP, .TRIANGLE_FAN.
	*/
	setDrawMode: function(mode){
		this.drawMode = mode;
	},

	/**
	* Generate the "send" region of the vs and fs attribute stores from the necessary
	* sub-stores.
	* @method Palette.Program#generateSend
	* @private
	*/
	generateSend: function(dest, conf){
		var toSend;
		for(var name in dest.access){
			if(conf[name]) toSend = conf[name];
			else toSend = dest.store[name];
			dest.send[name] = toSend;
		}
	}
};
/**
* Returns the relevant setter function for each 
* @method Palette.Program.fetchSetter
* @private
*/
Palette.Program.fetchSetter = function(gl, type){
	//LAZY
	//I'LL DO THIS MORE ELEGANTLY ONE DAY.
	var oneParamFromArray = function(convertFunc){
		return function(ptr, array){
			convertFunc(ptr, array[0]);
		};
	};
	var twoParamFromArray = function(convertFunc){
		return function(ptr, array){
			convertFunc(ptr, array[0],array[1]);
		};
	};
	var threeParamFromArray = function(convertFunc){
		return function(ptr, array){
			convertFunc(ptr, array[0],array[1],array[2]);
		};
	};
	var fourParamFromArray = function(convertFunc){
		return function(ptr, array){
			convertFunc(ptr, array[0],array[1],array[2],array[3]);
		};
	};

	var k;

	switch(type){
		case "float":
			return oneParamFromArray(gl.uniform1f.bind(gl));
		case "float[]":
			return gl.uniform1fv.bind(gl);
		case "int":
			return oneParamFromArray(gl.uniform1i.bind(gl));
		case "int[]":
			return gl.uniform1iv.bind(gl);
		case "vec2":
			return twoParamFromArray(gl.uniform2f.bind(gl));
		case "vec2[]":
			return gl.uniform2fv.bind(gl);
		case "ivec2":
			return twoParamFromArray(gl.uniform2i.bind(gl));
		case "ivec2[]":
			return gl.uniform2iv.bind(gl);
		case "vec3":
			return threeParamFromArray(gl.uniform3f.bind(gl));
		case "vec3[]":
			return gl.uniform3fv.bind(gl);
		case "ivec3":
			return threeParamFromArray(gl.uniform3i.bind(gl));
		case "ivec3[]":
			return gl.uniform3iv.bind(gl);
		case "vec4":
			return fourParamFromArray(gl.uniform4f.bind(gl));
		case "vec4[]":
			return gl.uniform4fv.bind(gl);
		case "ivec4":
			return fourParamFromArray(gl.uniform4i.bind(gl));
		case "ivec4[]":
			return gl.uniform4iv.bind(gl);
		case "mat2":
			return gl.uniformMatrix2fv.bind(gl);
		case "mat3":
			return gl.uniformMatrix3fv.bind(gl);
		case "mat4":
			return gl.uniformMatrix4fv.bind(gl);
		case "texture":
			alert("You're on your own, kid.");
			return null;
		case "vertexAttrib":
			k = function(attrib, buffer){
				gl.bindBuffer(gl.ARRAY_BUFFER, buffer.pointer);
				gl.vertexAttribPointer(attrib.pointer, buffer.itemSize, gl.FLOAT, false, 0, 0);
			};
			return k.bind(gl);
		case "buffer":
			k = function(buffer, bufferData){
				gl.bindBuffer(gl.ARRAY_BUFFER, buffer.pointer);
				gl.bufferData(gl.ARRAY_BUFFER, bufferData, gl.DYNAMIC_DRAW);
			};
			return k.bind(gl);
		default:
			alert("Not gonna lie - you really messed up. I can't pass "+type+" onto the shader.");
			return null;
	}
};

Palette.Program.NONE_MODE	= 0;
Palette.Program.VS_MODE 	= 1;
Palette.Program.FS_MODE 	= 2;
Palette.Program.BOTH_MODE 	= 3;

//WEBGL
Palette.Program.POINTS			= 0;
Palette.Program.LINES			= 1;
Palette.Program.LINE_LOOP		= 2;
Palette.Program.LINE_STRIP		= 3;
Palette.Program.TRIANGLES		= 4;
Palette.Program.TRIANGLE_STRIP	= 5;
Palette.Program.TRIANGLE_FAN	= 6;
//MINE
Palette.Program.POLYGON			= 7;


Palette.Program.prototype.constructor = Palette.Program;

/* global WebGLShader */
/**
* @classdesc Abstraction of shader references to allow easy manipulation.
* @class Palette.Shader
* @description Initialise and compile a valid Source Object into a Shader.
* @param {WebGLRenderingContext} gl - The context the shader will belong to and be compiled by.
* @param {string} name - The name the shader object will be referred to by.
* @param {number} type - The class of the shader contained, either Palette.Shader.VS or Palette.Shader.FS.
* @param {string} source - The source code to compile the shader from.
* @param {WebGLRenderingContext} gl - The context the shaders of this program will belong to and be compiled by.
* @param {object} [attrs] - The array which contains attribute names and default values, as an array of 3-tuples.
* @author FelixMcFelix (Kyle S.)
*/
Palette.Shader = function(gl, name, type, source, attrs){
	/**
	* The shader's name.
	* @name Palette.Shader#name
	* @type String
	* @protected
	* @readonly
	*/
	this.name = name;

	/**
	* The type of shader, either Palette.Shader.VS or Palette.Shader.FS for objects.
	* @name Palette.Shader#type
	* @type int
	* @protected
	* @readonly
	*/
	this.type = type;

	/**
	* The shader's attached context.
	* @name Palette.Shader#context
	* @type WebGLRenderingContext
	* @protected
	* @readonly
	*/
	this.context = gl;

	/**
	* The shader's attribute array.
	* @name Palette.Shader#attrs
	* @type Array[]
	* @protected
	* @readonly
	*/
	this.attrs = attrs;

	/**
	* The reference to the compiled shader in the WebGLRenderingContext.
	* @name Palette.Shader#shader
	* @type WebGLShader
	* @protected
	* @readonly
	*/
	this.shader = null;

	/**
	* Has the shader attempted compilation yet?
	* @name Palette.Shader#compiled
	* @type Boolean
	* @private
	* @readonly
	*/
	this.compiled = false;

	this.bakeShader(source);
};

Palette.Shader.prototype = {
	/**
	* Compile shader code from a source string. Once compiled, you cannot recompile.
	* @method Palette.Shader#bakeShader
	* @protected
	* @param {string} source - The source code to compile and attach to this shader object.
	* @return {boolean} True if successful, false if unsuccessful.
	*/
	bakeShader: function(source){
		if (this.compiled){return null;}

		this.compiled = true;

		switch(this.type){
			case Palette.Shader.VS:
				this.shader = this.context.createShader(this.context.VERTEX_SHADER);
				break;
			case Palette.Shader.FS:
				this.shader = this.context.createShader(this.context.FRAGMENT_SHADER);
				break;
			default:
				return false;
		}

		this.context.shaderSource(this.shader, source);
		this.context.compileShader(this.shader);
		if (!this.context.getShaderParameter(this.shader, this.context.COMPILE_STATUS)) {
			alert("An error occurred compiling the shaders: " + this.context.getShaderInfoLog(this.shader));
			return false;
		}

		return true;
	}
};

Palette.Shader.VS		= 0;
Palette.Shader.FS		= 1;
Palette.Shader.LIST		= 2;

Palette.Shader.prototype.constructor = Palette.Shader;

/* global Palette */
/**
* @classdesc
* A Factory class designed to process objects, URLs, JSON and potentially other formats to generate
* valid {@link Palette.Shader} objects.
*
* This is a deliberate choice, to abstract some functionality away from the central {@link Palette.Manager}
* class.
* @class Palette.ShaderFactory
* @description Create a new ShaderFactory object - this is done automatically by {@link Palette.Manager}.
* @param {Palette.Manager} manager - The manager object to place generated shaders into. 
* @author FelixMcFelix (Kyle S.)
*/
Palette.ShaderFactory = function(manager){
	/**
    * An object reference to the parent {@link Palette.Manager}.
    * @name Palette.ShaderFactory#manager
	* @type Palette.Manager
    * @readonly
    * @protected
    */
    this.that = this;
	this.manager = manager;
	this.downloadInProgress = false;
};

Palette.ShaderFactory.prototype = {
	/**
	* Begin the shader construction process.
	* @method Palette.ShaderFactory#addShader
	* @public
	* @param {string|Palette.Shader|Object} shader - URL, JSON, Shader Source Object or {@link Palette.Shader}.
	*/
	addShader: function(shader){
		var inShader;
		var outShader;

		switch(this.establishType(shader)){
			case Palette.ShaderFactory.SOURCE_OBJECT:
				inShader = shader;
				/* falls through */
			case Palette.ShaderFactory.JSON:
				inShader = inShader || JSON.parse(shader);
				outShader = this.createShaderObject(inShader);
				break;

			case Palette.ShaderFactory.SHADER_OBJECT:
				outShader = shader;
				break;

			case Palette.ShaderFactory.URL:
				this.downloadFromURL(shader);
				break;
			default:
				throw new Error("Not a valid type of shader.");
		}

		//while(this.downloadInProgress){}

		if(outShader){this.registerShader(outShader);}
	},

	/**
	* Create a shader from a source object.
	* @method Palette.ShaderFactory#createShaderObject
	* @protected
	* @param {object} sourceObject - Either a list of shaders or a single shader object is valid.
	* @return {Palette.Shader|null} Returns a {@link Palette.Shader} if the Source Object was not a list. If it was a list, it adds all the children instead.
	*/
	createShaderObject: function(sourceObject){
		switch(sourceObject.type){
			case Palette.Shader.VS:
			case Palette.Shader.FS:
				return new Palette.Shader(this.manager.context, sourceObject.name, sourceObject.type, sourceObject.src, sourceObject.attrs);

			case Palette.Shader.LIST:
				for (var i = sourceObject.content.length - 1; i >= 0; i--) {
					this.addShader(sourceObject.content[i]);
				}
				break;

			default:
				throw new Error("Tried to create an illegal class of shader.");
		}
	},

	/**
	* Download a file from the supplied URL, before adding it to the manager.
	* @method Palette.ShaderFactory#downloadFromURL
	* @protected
	* @param {string} url - URL corresponding to a Shader Source Object JSON file.
	*/
	downloadFromURL: function(url){
		var rdr = new XMLHttpRequest();
		rdr.open("GET", url, true);
		rdr.onload = function(){
			console.log(that);
			that.addShader(rdr.response);
			that.downloadInProgress = false;
		};
		that.downloadInProgress = true;
		rdr.send();
	},

	/**
	* Determine the type of shader reference passed to the factory.
	* @method Palette.ShaderFactory#establishType
	* @protected
	* @param {string|Palette.Shader} shader - URL, JSON or Palette.Shader.
	* @return {number} Either Palette.ShaderFactory.SOURCE_OBJECT, .JSON, .URL or .SHADER_OBJECT.
	*/
	establishType: function(shader){
		var type = -1;
		if(shader instanceof Palette.Shader){
			type = Palette.ShaderFactory.SHADER_OBJECT;
		} else if((shader.type != undefined) && (shader.name != undefined) && (shader.content || shader.src)){
			type = Palette.ShaderFactory.SOURCE_OBJECT;
		} else if(this.isJSON(shader)){
			type = Palette.ShaderFactory.JSON;
			/*} else if(this.isString(shader)){
			 type = Palette.ShaderFactory.URL;
			 }*/
		}else{
			console.log("PALETTE: BAD SHADER. MALFORMED JSON OR BAD OBJECT SHAPE.");
		}
		return type;
	},

	/**
	* Determine if a string is valid JSON.
	* @method Palette.ShaderFactory#isJSON
	* @private
	* @param {string} str - Suspected JSON string to check.
	*/
	isJSON: function(str){
		try{
			JSON.parse(str);
			return true;
		} catch (e){
			return false;
		}
	},

	isString: function(s){
    	return typeof(s) === 'string' || s instanceof String;
	},

	/**
	* Add a shader directly into the manager's storage for future access.
	* @method Palette.ShaderFactory#registerShader
	* @protected
	* @param {Palette.Shader} shaderObject - Compiled shader object to store in the {@link Palette.Manager}.
	*/
	registerShader: function(shaderObject){
		switch(shaderObject.type){
			case Palette.Shader.VS:
				this.manager.vertShaders[shaderObject.name] = this.manager.vertShaders[shaderObject.name] || shaderObject;
				break;
			case Palette.Shader.FS:
				this.manager.fragShaders[shaderObject.name] = this.manager.fragShaders[shaderObject.name] || shaderObject;
				break;
			default:
				throw new Error("Tried to register an illegal class of shader.");
		}
	}
};

Palette.ShaderFactory.SOURCE_OBJECT	= 0;
Palette.ShaderFactory.JSON			= 1;
Palette.ShaderFactory.URL				= 2;
Palette.ShaderFactory.SHADER_OBJECT	= 3;

Palette.ShaderFactory.prototype.constructor = Palette.ShaderFactory;
'use strict';

module.exports = earcut;

function earcut(data, holeIndices, dim) {

    dim = dim || 2;

    var hasHoles = holeIndices && holeIndices.length,
        outerLen = hasHoles ? holeIndices[0] * dim : data.length,
        outerNode = filterPoints(data, linkedList(data, 0, outerLen, dim, true)),
        triangles = [];

    if (!outerNode) return triangles;

    var minX, minY, maxX, maxY, x, y, size;

    if (hasHoles) outerNode = eliminateHoles(data, holeIndices, outerNode, dim);

    // if the shape is not too simple, we'll use z-order curve hash later; calculate polygon bbox
    if (data.length > 80 * dim) {
        minX = maxX = data[0];
        minY = maxY = data[1];

        for (var i = dim; i < outerLen; i += dim) {
            x = data[i];
            y = data[i + 1];
            if (x < minX) minX = x;
            if (y < minY) minY = y;
            if (x > maxX) maxX = x;
            if (y > maxY) maxY = y;
        }

        // minX, minY and size are later used to transform coords into integers for z-order calculation
        size = Math.max(maxX - minX, maxY - minY);
    }

    earcutLinked(data, outerNode, triangles, dim, minX, minY, size);

    return triangles;
}

// create a circular doubly linked list from polygon points in the specified winding order
function linkedList(data, start, end, dim, clockwise) {
    var sum = 0,
        i, j, last;

    // calculate original winding order of a polygon ring
    for (i = start, j = end - dim; i < end; i += dim) {
        sum += (data[j] - data[i]) * (data[i + 1] + data[j + 1]);
        j = i;
    }

    // link points into circular doubly-linked list in the specified winding order
    if (clockwise === (sum > 0)) {
        for (i = start; i < end; i += dim) last = insertNode(i, last);
    } else {
        for (i = end - dim; i >= start; i -= dim) last = insertNode(i, last);
    }

    return last;
}

// eliminate colinear or duplicate points
function filterPoints(data, start, end) {
    if (!end) end = start;

    var node = start,
        again;
    do {
        again = false;

        if (!node.steiner && (equals(data, node.i, node.next.i) || orient(data, node.prev.i, node.i, node.next.i) === 0)) {

            // remove node
            node.prev.next = node.next;
            node.next.prev = node.prev;

            if (node.prevZ) node.prevZ.nextZ = node.nextZ;
            if (node.nextZ) node.nextZ.prevZ = node.prevZ;

            node = end = node.prev;

            if (node === node.next) return null;
            again = true;

        } else {
            node = node.next;
        }
    } while (again || node !== end);

    return end;
}

// main ear slicing loop which triangulates a polygon (given as a linked list)
function earcutLinked(data, ear, triangles, dim, minX, minY, size, pass) {
    if (!ear) return;

    // interlink polygon nodes in z-order
    if (!pass && minX !== undefined) indexCurve(data, ear, minX, minY, size);

    var stop = ear,
        prev, next;

    // iterate through ears, slicing them one by one
    while (ear.prev !== ear.next) {
        prev = ear.prev;
        next = ear.next;

        if (isEar(data, ear, minX, minY, size)) {
            // cut off the triangle
            triangles.push(prev.i / dim);
            triangles.push(ear.i / dim);
            triangles.push(next.i / dim);

            // remove ear node
            next.prev = prev;
            prev.next = next;

            if (ear.prevZ) ear.prevZ.nextZ = ear.nextZ;
            if (ear.nextZ) ear.nextZ.prevZ = ear.prevZ;

            // skipping the next vertice leads to less sliver triangles
            ear = next.next;
            stop = next.next;

            continue;
        }

        ear = next;

        // if we looped through the whole remaining polygon and can't find any more ears
        if (ear === stop) {
            // try filtering points and slicing again
            if (!pass) {
                earcutLinked(data, filterPoints(data, ear), triangles, dim, minX, minY, size, 1);

            // if this didn't work, try curing all small self-intersections locally
            } else if (pass === 1) {
                ear = cureLocalIntersections(data, ear, triangles, dim);
                earcutLinked(data, ear, triangles, dim, minX, minY, size, 2);

            // as a last resort, try splitting the remaining polygon into two
            } else if (pass === 2) {
                splitEarcut(data, ear, triangles, dim, minX, minY, size);
            }

            break;
        }
    }
}

// check whether a polygon node forms a valid ear with adjacent nodes
function isEar(data, ear, minX, minY, size) {

    var a = ear.prev.i,
        b = ear.i,
        c = ear.next.i,

        ax = data[a], ay = data[a + 1],
        bx = data[b], by = data[b + 1],
        cx = data[c], cy = data[c + 1],

        abd = ax * by - ay * bx,
        acd = ax * cy - ay * cx,
        cbd = cx * by - cy * bx,
        A = abd - acd - cbd;

    if (A <= 0) return false; // reflex, can't be an ear

    // now make sure we don't have other points inside the potential ear;
    // the code below is a bit verbose and repetitive but this is done for performance

    var cay = cy - ay,
        acx = ax - cx,
        aby = ay - by,
        bax = bx - ax,
        i, px, py, s, t, k, node;

    // if we use z-order curve hashing, iterate through the curve
    if (minX !== undefined) {

        // triangle bbox; min & max are calculated like this for speed
        var minTX = ax < bx ? (ax < cx ? ax : cx) : (bx < cx ? bx : cx),
            minTY = ay < by ? (ay < cy ? ay : cy) : (by < cy ? by : cy),
            maxTX = ax > bx ? (ax > cx ? ax : cx) : (bx > cx ? bx : cx),
            maxTY = ay > by ? (ay > cy ? ay : cy) : (by > cy ? by : cy),

            // z-order range for the current triangle bbox;
            minZ = zOrder(minTX, minTY, minX, minY, size),
            maxZ = zOrder(maxTX, maxTY, minX, minY, size);

        // first look for points inside the triangle in increasing z-order
        node = ear.nextZ;

        while (node && node.z <= maxZ) {
            i = node.i;
            node = node.nextZ;
            if (i === a || i === c) continue;

            px = data[i];
            py = data[i + 1];

            s = cay * px + acx * py - acd;
            if (s >= 0) {
                t = aby * px + bax * py + abd;
                if (t >= 0) {
                    k = A - s - t;
                    if ((k >= 0) && ((s && t) || (s && k) || (t && k))) return false;
                }
            }
        }

        // then look for points in decreasing z-order
        node = ear.prevZ;

        while (node && node.z >= minZ) {
            i = node.i;
            node = node.prevZ;
            if (i === a || i === c) continue;

            px = data[i];
            py = data[i + 1];

            s = cay * px + acx * py - acd;
            if (s >= 0) {
                t = aby * px + bax * py + abd;
                if (t >= 0) {
                    k = A - s - t;
                    if ((k >= 0) && ((s && t) || (s && k) || (t && k))) return false;
                }
            }
        }

    // if we don't use z-order curve hash, simply iterate through all other points
    } else {
        node = ear.next.next;

        while (node !== ear.prev) {
            i = node.i;
            node = node.next;

            px = data[i];
            py = data[i + 1];

            s = cay * px + acx * py - acd;
            if (s >= 0) {
                t = aby * px + bax * py + abd;
                if (t >= 0) {
                    k = A - s - t;
                    if ((k >= 0) && ((s && t) || (s && k) || (t && k))) return false;
                }
            }
        }
    }

    return true;
}

// go through all polygon nodes and cure small local self-intersections
function cureLocalIntersections(data, start, triangles, dim) {
    var node = start;
    do {
        var a = node.prev,
            b = node.next.next;

        // a self-intersection where edge (v[i-1],v[i]) intersects (v[i+1],v[i+2])
        if (a.i !== b.i && intersects(data, a.i, node.i, node.next.i, b.i) &&
                locallyInside(data, a, b) && locallyInside(data, b, a)) {

            triangles.push(a.i / dim);
            triangles.push(node.i / dim);
            triangles.push(b.i / dim);

            // remove two nodes involved
            a.next = b;
            b.prev = a;

            var az = node.prevZ,
                bz = node.nextZ && node.nextZ.nextZ;

            if (az) az.nextZ = bz;
            if (bz) bz.prevZ = az;

            node = start = b;
        }
        node = node.next;
    } while (node !== start);

    return node;
}

// try splitting polygon into two and triangulate them independently
function splitEarcut(data, start, triangles, dim, minX, minY, size) {
    // look for a valid diagonal that divides the polygon into two
    var a = start;
    do {
        var b = a.next.next;
        while (b !== a.prev) {
            if (a.i !== b.i && isValidDiagonal(data, a, b)) {
                // split the polygon in two by the diagonal
                var c = splitPolygon(a, b);

                // filter colinear points around the cuts
                a = filterPoints(data, a, a.next);
                c = filterPoints(data, c, c.next);

                // run earcut on each half
                earcutLinked(data, a, triangles, dim, minX, minY, size);
                earcutLinked(data, c, triangles, dim, minX, minY, size);
                return;
            }
            b = b.next;
        }
        a = a.next;
    } while (a !== start);
}

// link every hole into the outer loop, producing a single-ring polygon without holes
function eliminateHoles(data, holeIndices, outerNode, dim) {
    var queue = [],
        i, len, start, end, list;

    for (i = 0, len = holeIndices.length; i < len; i++) {
        start = holeIndices[i] * dim;
        end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;
        list = linkedList(data, start, end, dim, false);
        if (list === list.next) list.steiner = true;
        list = filterPoints(data, list);
        if (list) queue.push(getLeftmost(data, list));
    }

    queue.sort(function (a, b) {
        return data[a.i] - data[b.i];
    });

    // process holes from left to right
    for (i = 0; i < queue.length; i++) {
        eliminateHole(data, queue[i], outerNode);
        outerNode = filterPoints(data, outerNode, outerNode.next);
    }

    return outerNode;
}

// find a bridge between vertices that connects hole with an outer ring and and link it
function eliminateHole(data, holeNode, outerNode) {
    outerNode = findHoleBridge(data, holeNode, outerNode);
    if (outerNode) {
        var b = splitPolygon(outerNode, holeNode);
        filterPoints(data, b, b.next);
    }
}

// David Eberly's algorithm for finding a bridge between hole and outer polygon
function findHoleBridge(data, holeNode, outerNode) {
    var node = outerNode,
        i = holeNode.i,
        px = data[i],
        py = data[i + 1],
        qMax = -Infinity,
        mNode, a, b;

    // find a segment intersected by a ray from the hole's leftmost point to the left;
    // segment's endpoint with lesser x will be potential connection point
    do {
        a = node.i;
        b = node.next.i;

        if (py <= data[a + 1] && py >= data[b + 1]) {
            var qx = data[a] + (py - data[a + 1]) * (data[b] - data[a]) / (data[b + 1] - data[a + 1]);
            if (qx <= px && qx > qMax) {
                qMax = qx;
                mNode = data[a] < data[b] ? node : node.next;
            }
        }
        node = node.next;
    } while (node !== outerNode);

    if (!mNode) return null;

    // look for points strictly inside the triangle of hole point, segment intersection and endpoint;
    // if there are no points found, we have a valid connection;
    // otherwise choose the point of the minimum angle with the ray as connection point

    var bx = data[mNode.i],
        by = data[mNode.i + 1],
        pbd = px * by - py * bx,
        pcd = px * py - py * qMax,
        cpy = py - py,
        pcx = px - qMax,
        pby = py - by,
        bpx = bx - px,
        A = pbd - pcd - (qMax * by - py * bx),
        sign = A <= 0 ? -1 : 1,
        stop = mNode,
        tanMin = Infinity,
        mx, my, amx, s, t, tan;

    node = mNode.next;

    while (node !== stop) {

        mx = data[node.i];
        my = data[node.i + 1];
        amx = px - mx;

        if (amx >= 0 && mx >= bx) {
            s = (cpy * mx + pcx * my - pcd) * sign;
            if (s >= 0) {
                t = (pby * mx + bpx * my + pbd) * sign;

                if (t >= 0 && A * sign - s - t >= 0) {
                    tan = Math.abs(py - my) / amx; // tangential
                    if (tan < tanMin && locallyInside(data, node, holeNode)) {
                        mNode = node;
                        tanMin = tan;
                    }
                }
            }
        }

        node = node.next;
    }

    return mNode;
}

// interlink polygon nodes in z-order
function indexCurve(data, start, minX, minY, size) {
    var node = start;

    do {
        if (node.z === null) node.z = zOrder(data[node.i], data[node.i + 1], minX, minY, size);
        node.prevZ = node.prev;
        node.nextZ = node.next;
        node = node.next;
    } while (node !== start);

    node.prevZ.nextZ = null;
    node.prevZ = null;

    sortLinked(node);
}

// Simon Tatham's linked list merge sort algorithm
// http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html
function sortLinked(list) {
    var i, p, q, e, tail, numMerges, pSize, qSize,
        inSize = 1;

    do {
        p = list;
        list = null;
        tail = null;
        numMerges = 0;

        while (p) {
            numMerges++;
            q = p;
            pSize = 0;
            for (i = 0; i < inSize; i++) {
                pSize++;
                q = q.nextZ;
                if (!q) break;
            }

            qSize = inSize;

            while (pSize > 0 || (qSize > 0 && q)) {

                if (pSize === 0) {
                    e = q;
                    q = q.nextZ;
                    qSize--;
                } else if (qSize === 0 || !q) {
                    e = p;
                    p = p.nextZ;
                    pSize--;
                } else if (p.z <= q.z) {
                    e = p;
                    p = p.nextZ;
                    pSize--;
                } else {
                    e = q;
                    q = q.nextZ;
                    qSize--;
                }

                if (tail) tail.nextZ = e;
                else list = e;

                e.prevZ = tail;
                tail = e;
            }

            p = q;
        }

        tail.nextZ = null;
        inSize *= 2;

    } while (numMerges > 1);

    return list;
}

// z-order of a point given coords and size of the data bounding box
function zOrder(x, y, minX, minY, size) {
    // coords are transformed into (0..1000) integer range
    x = 1000 * (x - minX) / size;
    x = (x | (x << 8)) & 0x00FF00FF;
    x = (x | (x << 4)) & 0x0F0F0F0F;
    x = (x | (x << 2)) & 0x33333333;
    x = (x | (x << 1)) & 0x55555555;

    y = 1000 * (y - minY) / size;
    y = (y | (y << 8)) & 0x00FF00FF;
    y = (y | (y << 4)) & 0x0F0F0F0F;
    y = (y | (y << 2)) & 0x33333333;
    y = (y | (y << 1)) & 0x55555555;

    return x | (y << 1);
}

// find the leftmost node of a polygon ring
function getLeftmost(data, start) {
    var node = start,
        leftmost = start;
    do {
        if (data[node.i] < data[leftmost.i]) leftmost = node;
        node = node.next;
    } while (node !== start);

    return leftmost;
}

// check if a diagonal between two polygon nodes is valid (lies in polygon interior)
function isValidDiagonal(data, a, b) {
    return a.next.i !== b.i && a.prev.i !== b.i &&
           !intersectsPolygon(data, a, a.i, b.i) &&
           locallyInside(data, a, b) && locallyInside(data, b, a) &&
           middleInside(data, a, a.i, b.i);
}

// winding order of triangle formed by 3 given points
function orient(data, p, q, r) {
    var o = (data[q + 1] - data[p + 1]) * (data[r] - data[q]) - (data[q] - data[p]) * (data[r + 1] - data[q + 1]);
    return o > 0 ? 1 :
           o < 0 ? -1 : 0;
}

// check if two points are equal
function equals(data, p1, p2) {
    return data[p1] === data[p2] && data[p1 + 1] === data[p2 + 1];
}

// check if two segments intersect
function intersects(data, p1, q1, p2, q2) {
    return orient(data, p1, q1, p2) !== orient(data, p1, q1, q2) &&
           orient(data, p2, q2, p1) !== orient(data, p2, q2, q1);
}

// check if a polygon diagonal intersects any polygon segments
function intersectsPolygon(data, start, a, b) {
    var node = start;
    do {
        var p1 = node.i,
            p2 = node.next.i;

        if (p1 !== a && p2 !== a && p1 !== b && p2 !== b && intersects(data, p1, p2, a, b)) return true;

        node = node.next;
    } while (node !== start);

    return false;
}

// check if a polygon diagonal is locally inside the polygon
function locallyInside(data, a, b) {
    return orient(data, a.prev.i, a.i, a.next.i) === -1 ?
        orient(data, a.i, b.i, a.next.i) !== -1 && orient(data, a.i, a.prev.i, b.i) !== -1 :
        orient(data, a.i, b.i, a.prev.i) === -1 || orient(data, a.i, a.next.i, b.i) === -1;
}

// check if the middle point of a polygon diagonal is inside the polygon
function middleInside(data, start, a, b) {
    var node = start,
        inside = false,
        px = (data[a] + data[b]) / 2,
        py = (data[a + 1] + data[b + 1]) / 2;
    do {
        var p1 = node.i,
            p2 = node.next.i;

        if (((data[p1 + 1] > py) !== (data[p2 + 1] > py)) &&
            (px < (data[p2] - data[p1]) * (py - data[p1 + 1]) / (data[p2 + 1] - data[p1 + 1]) + data[p1]))
                inside = !inside;

        node = node.next;
    } while (node !== start);

    return inside;
}

// link two polygon vertices with a bridge; if the vertices belong to the same ring, it splits polygon into two;
// if one belongs to the outer ring and another to a hole, it merges it into a single ring
function splitPolygon(a, b) {
    var a2 = new Node(a.i),
        b2 = new Node(b.i),
        an = a.next,
        bp = b.prev;

    a.next = b;
    b.prev = a;

    a2.next = an;
    an.prev = a2;

    b2.next = a2;
    a2.prev = b2;

    bp.next = b2;
    b2.prev = bp;

    return b2;
}

// create a node and optionally link it with previous one (in a circular doubly linked list)
function insertNode(i, last) {
    var node = new Node(i);

    if (!last) {
        node.prev = node;
        node.next = node;

    } else {
        node.next = last.next;
        node.prev = last;
        last.next.prev = node;
        last.next = node;
    }
    return node;
}

function Node(i) {
    // vertex coordinates
    this.i = i;

    // previous and next vertice nodes in a polygon ring
    this.prev = null;
    this.next = null;

    // z-order curve value
    this.z = null;

    // previous and next nodes in z-order
    this.prevZ = null;
    this.nextZ = null;

    // indicates whether this is a steiner point
    this.steiner = false;
}

;
// end
